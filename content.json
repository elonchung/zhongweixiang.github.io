{"pages":[{"title":"404 Not Found：该页无法显示","date":"2018-05-02T15:40:57.985Z","updated":"2018-05-02T15:40:57.985Z","comments":false,"path":"/404.html","permalink":"https://www.elonchung.cn//404.html","excerpt":"","text":""},{"title":"","date":"2017-06-27T11:19:14.000Z","updated":"2018-02-27T05:38:31.856Z","comments":true,"path":"about/index.html","permalink":"https://www.elonchung.cn/about/index.html","excerpt":"","text":"个人信息姓名：钟伟骧邮件：web1740@163.com座右铭：乐观自信爱生活研究方向前端：node.js、HTML5后端：PHP底层原理、PHP扩展、设计模式、算法、Java基本应用架构：分布式架构、微服务、大数据一个小小的码农，有个小小的3年计划：熟悉热门的web全栈的知识。"},{"title":"书单","date":"2018-05-03T11:48:31.394Z","updated":"2018-05-03T11:48:31.394Z","comments":false,"path":"books/index.html","permalink":"https://www.elonchung.cn/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-05-03T11:48:31.394Z","updated":"2018-05-03T11:48:31.394Z","comments":false,"path":"categories/index.html","permalink":"https://www.elonchung.cn/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-05-03T11:48:31.394Z","updated":"2018-05-03T11:48:31.394Z","comments":true,"path":"links/index.html","permalink":"https://www.elonchung.cn/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-05-03T11:48:31.394Z","updated":"2018-05-03T11:48:31.394Z","comments":false,"path":"repository/index.html","permalink":"https://www.elonchung.cn/repository/index.html","excerpt":"","text":""},{"title":"text","date":"2017-06-27T10:51:37.000Z","updated":"2018-02-27T05:38:31.859Z","comments":true,"path":"text/index.html","permalink":"https://www.elonchung.cn/text/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-05-03T11:48:31.394Z","updated":"2018-05-03T11:48:31.394Z","comments":false,"path":"tags/index.html","permalink":"https://www.elonchung.cn/tags/index.html","excerpt":"","text":""},{"title":"","date":"2018-05-04T01:19:58.687Z","updated":"2018-05-04T01:19:58.687Z","comments":true,"path":"google5f8a468f4a1f027b.html","permalink":"https://www.elonchung.cn/google5f8a468f4a1f027b.html","excerpt":"","text":"google-site-verification: google5f8a468f4a1f027b.html"},{"title":"","date":"2018-05-04T05:28:24.736Z","updated":"2018-05-04T05:28:24.736Z","comments":true,"path":"baidu_verify_uyVqI5LhhO.html","permalink":"https://www.elonchung.cn/baidu_verify_uyVqI5LhhO.html","excerpt":"","text":"uyVqI5LhhO"}],"posts":[{"title":"技术博文网站整理与推荐","slug":"awesome","date":"2018-04-09T05:21:52.000Z","updated":"2018-05-03T15:27:16.215Z","comments":true,"path":"2018/04/awesome/","link":"","permalink":"https://www.elonchung.cn/2018/04/awesome/","excerpt":"","text":"技术博文网站整理与推荐以下序号排名不分先后，只是便于整理，感谢各位作者或团队的分享。阅读工具主要使用：Feedly APP + 即刻APP + 微信APP + 开发者头条APP实在太懒了，以致于不知道怎么写推荐语，不过应该都是大家耳闻能详的，也欢迎大家推荐。酷 壳 – CoolShellhttp://coolshell.cn阮一峰的网络日志http://www.ruanyifeng.com/blog/阿里中间件团队博客http://jm.taobao.org/美团点评技术团队https://tech.meituan.com/InfoQ中文http://www.infoq.com/cn/并发编程网http://ifeve.com/IBM developerWorks 中国http://www.ibm.com/developerworks/cn/张逸http://zhangyi.farbox.com/程序猿DD博客http://blog.didispace.com/Martin Fowlerhttps://martinfowler.com/Spring官方博客http://spring.io/blogNetflix TechBloghttps://medium.com/netflix-techblogInfoQ英文http://www.infoq.com/IntelliJ IDEA Bloghttps://blog.jetbrains.com/ideaThe Effective Engineerhttp://www.effectiveengineer.com/The GitHub Bloghttps://github.com/blogTop Java Blogshttps://www.topjavablogs.com/大数据杂谈微信公众号【BigdataTina2016】高可用架构微信公众号【ArchNotes】架构师之路微信公众号【road5858】开涛的博客微信公众号【kaitao-1234567】聊聊架构微信公众号【archtime】你假笨微信公众号【lovestblog】思特沃克微信公众号【ThoughtWorks】携程技术中心微信公众号【ctriptech】中生代技术微信公众号【freshmanTechnology】阿里技术微信公众号【ali_tech】RednaxelaFXhttps://www.zhihu.com/people/rednaxelafx/activities李艳鹏http://www.jianshu.com/u/581f548ef0ec开发者头条https://toutiao.io/王楠博客http://wangnan.tech","categories":[{"name":"小公举","slug":"小公举","permalink":"https://www.elonchung.cn/categories/小公举/"}],"tags":[{"name":"小公举","slug":"小公举","permalink":"https://www.elonchung.cn/tags/小公举/"}]},{"title":"常用的工具（个人收录-待完善）","slug":"tools","date":"2017-10-30T02:10:25.000Z","updated":"2018-05-03T03:23:46.274Z","comments":true,"path":"2017/10/tools/","link":"","permalink":"https://www.elonchung.cn/2017/10/tools/","excerpt":"","text":"常用的工具开发工具PHPstormzend studiosublimenotepad++Javacomposernode.jsWAMPSQLyog 数据库管理XMind 脑图Wireshark 抓包fiddler 抓包Beyond Compare 文件对比WinSCP 传输HiJson json显示Oracle VM VirtualBox 虚拟机homestead-7 虚拟测试环境RedisDesktopManager redis服务端管理VMware 虚拟机VMware vSphere Client 虚拟化工具Source Insight 代码审阅SwitchHosts HOST解析工具以下收藏链接php之路前端工具PHP资源大全中文版在线工具百度静态资源公共库有趣的lol技能(web掌握)检测工具代码管理svngitSourceTreelinux相关nginxapachephpmysqlredismemcachesvn以下收藏链接linux公社工具资料更新地址;linux依赖包关系查询chrome插件postmanjsonviewOneTab掘金SwitchyOmega广告净化器InfinityOctotree Code tree for GitHubAdvanced REST client插件网windows小工具Evernote 笔记RunBlock 程序禁用SpaceSniffer 硬盘空间占用procexp64 进程管理Security Process Explorer 进程屏蔽禁止Everything 资源快速搜索Shadowsocks V屁N微信公众号架构师之路DBAplus社群美团点评技术团队携程技术中心阿里技术CSDN大数据开源中国黑马公社伯乐在线聊聊架构壹佰案例高效开发运维","categories":[{"name":"tools","slug":"tools","permalink":"https://www.elonchung.cn/categories/tools/"}],"tags":[{"name":"tools","slug":"tools","permalink":"https://www.elonchung.cn/tags/tools/"}]},{"title":"LAMP编译安装及配置篇——就是干","slug":"lamp","date":"2017-07-20T14:59:34.000Z","updated":"2018-05-03T15:24:04.265Z","comments":true,"path":"2017/07/lamp/","link":"","permalink":"https://www.elonchung.cn/2017/07/lamp/","excerpt":"","text":"LAMP：安装所需要系统库相关库文件安装安装包下载链接：http://download.csdn.net/detail/kc88168/5902111安装gcc1234yum install gcc gcc-c++ gcc-g77yum install make文件放到/usr/local/src/下全部解压for file in *.tar.gz; do tar -zxvf &quot;$&#123;file&#125;&quot;; done注：执行上面的语句之后的解压就不用再执行了安装libxml2最新库文件123tar zxvf libxml2-2.9.0.tar.gzcd libxml2-2.9.0 ./configure --prefix=/usr/local/libxml2安装zlib最新库文件123tar zxvf zlib.1.2.7.tar.gzcd ../zlib.1.2.7./configure安装libpng最新库文件123456789101112tar zxvf libpng-1.5.14.tar.gzcd ../libpng-1.5.14在./configure --prefix=/usr/local/libpng这步最后会提示：configure: error: ZLib not installed解决方法如下：进入zlib的源文件目录，执行命令 make clean,清除zlib；重新配置 ./configure,后面不要接--prefix参数；make &amp;&amp; make install；进入libpng目录，执行命令 ./configure --prefix=/usr/local/libpng;make &amp;&amp; make install；安装libmcrypt最新库文件1234567//tar zxvf libmcrypt-2.5.8.tar.gzcd ../libmcrypt-2.5.8./configure --prefix=/usr/local/libmcrypt安装完成libmcrypt库以后，不同的linux系统版本有可能还要安装一下libltdl库。cd /usr/local/src/libmcrypt-2.5.8/libltdl./configure --enable-ltdl-installmake &amp;&amp; make install安装jpeg8最新库文件12345678910cd ../jpeg-8b/mkdir /usr/local/jpeg8 //建立jpeg8软件安装目录mkdir /usr/local/jpeg8/bin //建立存放命令的目录mkdir /usr/local/jpeg8/lib //创建jpeg8库文件所在目录mkdir /usr/local/jpeg8/include //建立存放头文件目录mkdir -p /usr/local/jpeg8/man/man1 //建立存放手册的目录./configure \\--prefix=/usr/local/jpeg8/ \\--enable-share \\--enable-static警告:configure: WARNING: unrecognized options: –enable-share [可忽略]在安装GD2库配置时，可以在configure命令的选项中加上“–with-jpeg=/usr/local/jpeg8”选项，指定jpeg8库文件的位置。安装PHP时也要指定该库文件的位置。安装freetype最新库文件123tar zxvf freetype-2.4.10.tar.gzcd ../freetype-2.4.10./configure --prefix=/usr/local/freetype &amp;&amp; make &amp;&amp; make install安装atuoconf最新的库文件需要先装perl包1234yum install perlcd ../autoconf-2.69configure时，不用指定路径。./configure &amp;&amp; make &amp;&amp; make install安装最新的GD库文件1234567891011cd ../gd-2.0.35./configure \\ //配置命令--prefix=/usr/local/gd \\ //指定安装软件的位置--with-jpeg=/usr/local/jpeg8/ \\ //指定去哪找jpeg库文件--with-png=/usr/local/libpng/ \\ //指定去哪找png库文件--with-freetype=/usr/local/freetype/ //指定去哪找freetype 2.x字体库的位置./configure \\--prefix=/usr/local/gd \\--with-jpeg=/usr/local/jpeg8/ \\--with-png=/usr/local/libpng/ \\--with-freetype=/usr/local/freetype/如果安装成功会在/usr/local/gd/目录下存在bin、include和lib这三个目录。在安装PHP5时，通过在configure命令选项中加上“–with-gd=/usr/local/gd”选项，指定GD库文件的位置。如果报错:make[2]: [gd_png.lo] Error 1make[2]: Leaving directory `/tmp/gd-2.0.35’make[1]: [all-recursive] Error 1make[1]: Leaving directory `/tmp/gd-2.0.35’make: *** [all] Error 2解决方案:vi gd_png.c找到#include “png.h”改成#include “/usr/local/libpng/include/png.h”安装新版本的apache服务器1、卸载apr、apr-utilyum remove apr apr-util下载安装：http://apr.apache.org/download.cgiapr-1.4.6.tar.gzcd ../apr-1.4.6./configure –prefix=/usr/local/apr-httpd/ &amp;&amp; make &amp;&amp; make install下载安装：http://apr.apache.org/download.cgiapr-util-1.5.1.tar.gzcd ../apr-util-1.5.1./configure –prefix=/usr/local/apr-util-httpd/ –with-apr=/usr/local/apr-httpd/ &amp;&amp; make &amp;&amp; make install下载：http://sourceforge.net/projects/pcre安装新版本的pcre123unzip -o pcre-8.32.zipcd pcre-8.32./configure --prefix=/usr/local/pcre &amp;&amp; make &amp;&amp; make install安装apache12345678910111213141516171819202122232425cd ../httpd-2.4.4./configure \\--prefix=/usr/local/apache2 \\--enable-mods-shared=all \\--enable-deflate \\--enable-speling \\--enable-cache \\--enable-file-cache \\--enable-disk-cache \\--enable-mem-cache \\--enable-so \\--enable-expires=shared \\--enable-rewrite=shared \\--enable-static-support \\--sysconfdir=/etc/httpd \\--with-z=/usr/local/zlib/ \\--with-apr=/usr/local/apr-httpd/ \\--with-apr-util=/usr/local/apr-util-httpd/ \\--with-pcre=/usr/local/pcre/ \\--disable-userdir \\--enable-rewrite \\--enable-cgi \\--enable-ssl make &amp;&amp; make install修改配置123456789101112131415161718vi /etc/httpd/httpd.conf改ServerName localhost:80找AddType application/x-gzip .gz .tgz加上下面一行AddType application/x-httpd-php .php .phtml改设置默认读取index.后缀&lt;IfModule dir_module&gt; DirectoryIndex index.php index.phtml index.html index.htm&lt;/IfModule&gt;【下面可以改也可以不改】&lt;Directory /&gt; Options FollowSymLinks AllowOverride All Order allow,deny Allow from all&lt;/Directory&gt;重启apacheecho “/usr/local/apache2/bin/apachectl start” &gt;&gt; /etc/rc.d/rc.local安装数据库5.5安装所需要系统库相关库文件1234yum install ncurses-develyum install bisonyum –y install gcc gcc-c++ gcc-g77 autoconf automake zlib* fiex* libxml* \\ncurses-devel libmcrypt* libtool-ltdl-devel*创建mysql安装目录mkdir -p /usr/local/webserver/mysql/创建数据存放目录mkdir -p /data/mysql/创建用户和用户组与赋予数据存放目录权限groupadd mysqluseradd -g mysql mysqlchown mysql.mysql -R /data/mysql/安装cmake（mysql5.5以后是通过cmake来编译的）12345wget http://www.cmake.org/files/v2.8/cmake-2.8.4.tar.gztar zxvf cmake-2.8.4.tar.gzcd cmake-2.8.4./configuremake &amp;&amp; make install下载安装http://mirrors.sohu.com/mysql/MySQL-5.5/123456789101112131415wget http://mirrors.sohu.com/mysql/MySQL-5.5/mysql-5.5.32.tar.gztar zxvf mysql-5.5.30.tar.gzcd mysql-5.5.30cmake . \\-DCMAKE_INSTALL_PREFIX=/usr/local/mysql/ \\-DMYSQL_DATADIR=/var/lib/mysql \\-DMYSQL_UNIX_ADDR=/var/lib/mysql/mysqld.sock \\-DWITH_INNOBASE_STORAGE_ENGINE=1 \\-DENABLED_LOCAL_INFILE=1 \\-DMYSQL_TCP_PORT=3306 \\-DEXTRA_CHARSETS=all \\-DDEFAULT_CHARSET=utf8 \\-DDEFAULT_COLLATION=utf8_general_ci \\-DMYSQL_USER=mysql \\-DWITH_DEBUG=0[出现警告：The variable, ‘MYSQL USER’, specified manually, was not used during the generation. ，可以忽略]//需要时也可以把预编译里面的MYSQL_USER去掉，即可预编译成功！1234567891011 make &amp;&amp; make install- 复制配置文件 # cp support-files/my-medium.cnf /etc/my.cnf # cp support-files/mysql.server /etc/init.d/mysqld # chmod 755 /etc/init.d/mysqld- 初始化数据库 bash scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql/- 启动mysql服务 # /etc/init.d/mysqld start 或者service mysqld start ps –ef | grep mysql 查看是否启动 /usr/local/mysql/bin/mysql -u root -p 登录数据库//打开/etc/selinux/config，把SELINUX=enforcing改为SELINUX=disabled后存盘退出重启机器试试3.本来初始化配置是这样的：scripts/mysql_install_db –basedir=/usr/local/mysql –datadir=/usr/local/mysql/data –user=mysql出现了[root@localhost mysql-5.6.14]# service mysql restartERROR! MySQL server PID file could not be found!Starting MySQL. ERROR! The server quit without updating PID file (/var/lib/mysql/localhost.localdomain.pid).在日志中出现了如下错误：Can’t open and lock privilege tables: Table ‘mysql.user’ doesn’t exist后来采用了下面的语句就可以了：scripts/mysql_install_db –basedir=/usr/local/mysql –datadir=/usr/local/mysql/data –user=mysql –ldata=/var/lib/mysql安装php5先修改后面的错误再./configure12345678910111213141516./configure \\--prefix=/usr/local/php \\--with-config-file-path=/usr/local/php/etc \\--with-apxs2=/usr/local/apache2/bin/apxs \\--with-mysql=/usr/local/mysql/ \\--with-libxml-dir=/usr/local/libxml2/ \\--with-png-dir=/usr/local/libpng/ \\--with-jpeg-dir=/usr/local/jpeg8/ \\--with-freetype-dir=/usr/local/freetype/ \\--with-gd=/usr/local/gd/ \\--with-zlib-dir=/usr/local/zlib/ \\--with-mcrypt=/usr/local/libmcrypt/ \\--with-mysqli=/usr/local/mysql/bin/mysql_config \\--enable-soap \\--enable-mbstring=all \\--enable-sockets错误 make: [ext/gd/gd.lo] error/usr/local/src/php-5.4.3/ext/gd/gd_ctx.c: In function ‘_php_image_output_ctx’:/usr/local/src/php-5.4.3/ext/gd/gd_ctx.c:153: error: ‘gdIOCtx’ has no member named ‘data’make: [ext/gd/gd.lo] Error 1解决vi &lt;gd_dir&gt;/include/gd_io.hvoid (gd_free) (struct gdIOCtx );加void (*data);}gdIOCtx;我的GD安装在/usr/local/gd2目录下，所以是#vi vi /usr/local/gd/include/gd_io.hlibltdl.so.3: cannot open shared object file: No such file or directorymake: *** [ext/phar/phar.php] Error 127解决方法：ln -s /usr/local/lib/libltdl.so.3 /usr/lib/libltdl.so.3cd /usr/local/libpng/lib/lslibpng15.a libpng15.so libpng15.so.15.10.0 libpng.la pkgconfiglibpng15.la libpng15.so.15 libpng.a libpng.so可以看到libpng15.so.15然后修改/etc/ld.so.conf 文件：vi /etc/ld.so.conf在第一行下面追加/usr/local/libpng/lib这个路径。然后重新编译安装即可。1234567cp php.ini-development /usr/local/php/etc/php.inivi /usr/local/php/etc/php.ini修改 date.timezone =&quot;PRC&quot;/usr/local/apache2/bin/apachectl stop/usr/local/apache2/bin/apachectl stopphpMyAdmin的安装1、进入软件源码所在的目录/usr/local/src/中，并解压软件包phpMyAdmin-3.5.6-all-languages.tar.gz到当前目录phpMyAdmin-3.5.6-all-languages下。2、把解压的目录phpMyAdmin-3.5.6-all-languages下的文件，全部复制到Apache的/usr/local/apache243/htdocs下，并新建一个名为phpmyadmin的目录下面，即安装完成。cp -a phpMyAdmin-3.5.6-all-languages /usr/local/apache2/htdocs/phpmyadmin3、在使用phpmyadmin之前，也需要先配置一下。配置的方法是通过对phpmyadmin顶层目录下的config.inc.php文件中 的几个选项做一些设置即可。默认不存在config.inc.php文件，我们需要手工创建一个，也可以复制config.sample.inc.php 模板得到最低限度的配置文件。123456789[root@localhost src]# cd /usr/local/apache2/htdocs/phpmyadmin/[root@localhost phpmyadmin]# cp config.sample.inc.php config.inc.phpvi config.inc.php$cfg[&apos;Servers&apos;][$i][&apos;auth_type&apos;]=&apos;http&apos;;//如果想让phpMyAdmin使用HTTP身份验证模式$cfg[&apos;Servers&apos;][$i][&apos;auth_type&apos;]=&apos;cookie&apos;;//无需输入密码登陆$cfg[&apos;Servers&apos;][$i][&apos;auth_type&apos;]=&apos;config&apos;;$cfg[&apos;Servers&apos;][$i][&apos;user&apos;]=&apos;root&apos;;$cfg[&apos;Servers&apos;][$i][&apos;password&apos;]=&apos;654321&apos;;","categories":[{"name":"LAMP","slug":"LAMP","permalink":"https://www.elonchung.cn/categories/LAMP/"}],"tags":[{"name":"LAMP","slug":"LAMP","permalink":"https://www.elonchung.cn/tags/LAMP/"}]},{"title":"Sublime的插件","slug":"sublime-package","date":"2017-07-11T06:47:42.000Z","updated":"2018-05-03T15:23:23.686Z","comments":true,"path":"2017/07/sublime-package/","link":"","permalink":"https://www.elonchung.cn/2017/07/sublime-package/","excerpt":"","text":"Markdown相关插件MarkdownOmniMarkupPreviewer配置","categories":[{"name":"小公举","slug":"小公举","permalink":"https://www.elonchung.cn/categories/小公举/"}],"tags":[{"name":"小公举","slug":"小公举","permalink":"https://www.elonchung.cn/tags/小公举/"}]},{"title":"高级PHP知识点","slug":"php-knowledge","date":"2017-07-10T02:21:34.000Z","updated":"2018-05-03T15:23:55.068Z","comments":true,"path":"2017/07/php-knowledge/","link":"","permalink":"https://www.elonchung.cn/2017/07/php-knowledge/","excerpt":"","text":"1. mysqli类似与PDO，是一个存取mysql的函数库，php官方推荐与PDO相比它仅支持mysql，PDO支持12中不同的数据库引擎两者都提供了OOP的支持，但是mysqli还支持函数式（过程式）的APIPDO支持名称式参数，mysqli不支持，例如：1234567$params = array(':username' =&gt; 'test', ':email' =&gt; $mail, ':last_login' =&gt; time() - 3600); $pdo-&gt;prepare(' SELECT * FROM users WHERE username = :username AND email = :email AND last_login &gt; :last_login');$pdo-&gt;execute($params);2. 如何在PHP中保持长链接polling &amp; long polling 最基本，废弃，性能差websocket 高并发不能用select，win要用iocp，linux要用epoll（现成的扩展libevent）高并发继续增长，单进程的websocket无法满足，拆成多进程，新问题：进程间通信、负载均衡、session唯一等，现成方案可以使用swoole3. php内存泄露问题：当你在Linux下频繁存取文件后,物理内存会很快被用光,当程序结束后,内存不会被正常释放,而是一直作为caching。解决方案：处理一个文件后手动释放一下内存（sync &amp;&amp; echo 3 &gt; /proc/sys/vm/drop_caches）症状都表现为内存占用的持续增长php.ini中的auto_append_file和auto_prepend_file可以在每个请求前后注入代码，配合查询/proc/{$pid}/status中的相应记录可以知道每个进程内存占用情况，php可以使用getmypid()函数获取当前进程的idphp5.2使用引用计数垃圾回收机制，php5.3使用“引用计数系统中的同步周期回收”（Concurrent Cycle Collection in Reference Counted Systems），是在引用计数的基础上加入了同步循环回收，可以解决循环引用引起的内存泄漏。4. 事务里如果不同表的引擎不同会怎样MyISAM不支持事务，InnoDB支持语句会正常执行，但不支持事务的引擎涉及的表会无法回滚5. explain里面有两列是跟索引有关的，是什么？possible_keys：可能可以利用的索引的名字。这里的索引名字是创建索引时指定的索引昵称；如果索引没有昵称，则默认显示的是索引中第一个列的名字（在本例中，它是“firstname”）。默认索引名字的含义往往不是很明显。key：它显示了MySQL实际使用的索引的名字。如果它为空（或NULL），则MySQL不使用索引。key_len：索引中被使用部分的长度，以字节计6. SQL如何调优？如何发现执行慢的SQL？使用mysql的慢日志来记录所有的慢sql，默认记录执行时间超过10s的sql使用explain来分析sql的执行情况；使用show processlist; 命令查看当前mysql的运行情况；7. memcached集群如何存储数据和保持一致性？取模算法一致性哈希算法session与一般缓存数据在服务器级别分离，将session存在独立的服务器池中使用magent缓存代理实现高可用（session重建可用这种方式避免）8. 数据库是如何做集群的，主备之间是如何做数据同步的？mysql本身支持主从同步的设置，在my.conf中做相应设置（client id），原理是基于主数据库的日志，在从服务器上执行日志中相同的sql阿里的Cobar，官方的MySQL Cluster（商业案例不多）读写分离，会增加开发的复杂度，读取的数据也不容易保证实时9. 解释下php-fpm的相关概念和作用CGI是一个协议，FastCGI是CGI的升级，还是一个协议，php-fpm是fastCGI的PHP实现，参考：https://segmentfault.com/q/1010000000256516实现了FastCGI协议的PHP进程管理器，PHP5.3以后才被官方默认加入，之前只是个第三方插件功能包括：支持平滑停止/启动的高级进程管理功能；可以工作于不同的 uid/gid/chroot 环境下，并监听不同的端口和使用不同的 php.ini 配置文件（可取代 safe_mode 的设置）；stdout 和 stderr 日志记录;发生意外情况的时候能够重新启动并缓存被破坏的 opcode;文件上传优化支持;&#8220;慢日志&#8221; &#8211; 记录脚本（不仅记录文件名，还记录 PHP backtrace 信息，可以使用 ptrace或者类似工具读取和分析远程进程的运行数据）运行所导致的异常缓慢;fastcgi_finish_request() &#8211; 特殊功能：用于在请求完成和刷新数据后，继续在后台执行耗时的工作（录入视频转换、统计处理等）；动态／静态子进程产生；基本 SAPI 运行状态信息（类似Apache的 mod_status）；基于 php.ini 的配置文件。10. 悲观锁和乐观锁 参考连接悲观锁：假定会发生并发冲突，一上来先加锁，再进行读写操作。优点：没有脏读，缺点：数据加锁时间较长，影响并发性能乐观锁：假定不会发生并发冲突，只在提交更改时才加锁，读取和更改时并不加锁。优点：并发性能好，缺点：有脏读的可能结论：在实际生产环境里边,如果并发量不大且不允许脏读，可以使用悲观锁解决并发问题；但如果系统的并发非常大的话,悲观锁定会带来非常大的性能问题,所以我们就要选择乐观锁定的方法.11. 接口加密措施加密算法：MD5、Sha1、Sha256、AES/DES、非对称加密（公钥私钥）加签名：传递的信息为明文，仅做防篡改校验直接对接口传递的信息进行加密，即传递的信息非明文，加密算法可以使用上述加密算法https协议，整个请求使用ssl进行加密，传递的信息非明文，但是用fiddle等工具仍可解密，因此敏感信息仍需结合上述两种方法进行加密和防篡改OAuth2.0例子：Jane (用户,资源的所有者) 将自己度假的照片 (受保护资源) 上传到了图片分享网站A (服务提供方).她现在想要在另外一个网站B (Client, 消费方) 在线打印这些照片. 一般情况下, Jane 需要使用自己的用户名和密码登陆网站A.但是, Jane 并不希望将自己的用户名和密码泄露给网站B. 可是网站B需要访问图片分享网站A的图片并将其打印出来.基于令牌（token）的身份认证和权限控制，平安玩的passport就是OAuth2.0的一个实现12. nginx如何配置负载均衡 参考连接Nginx负载均衡是通过upstream模块来实现的内置实现了三种负载策略：轮询（默认）：根据请求次数，将每个请求均匀分配到每台服务器，可以为每台服务器分配不同的权重（weight，默认为1），权重高的被分配的几率相应增大最少连接：将请求分配到连接数最少的服务器上，Nginx会统计哪些服务器的连接数最少IP Hash：使用hash算法将客户端IP分配到不同的服务器上，后续该IP的所有请求均分配到之前分配的服务器上13. 打点统计 监控措施 监控工具第三方打点统计API，如Google Analytics等目前在做的项目：交易一致性监控，单独部署的服务器在备库上对第三方订单进行反查跑批，比对双方订单状态及金额的一致性第三方监控工具，目前在用的zabbix，系统和网络性能监控，zabbix服务端可以独立运作，也可以结合zabbix agent完成更多监控工作。14. php5.5特性生成器(Generators)密码哈希APIfinallyempty()支持函数调用和表达式类名解析foreach改进：支持list()15. autoload原理: 参考16. redis集群：参考17. mysql连接池18. 如何配置PHP的session存储在缓存修改php.ini配置文件实现。修改session存储方式session.save_handler = memcached修改session存储地址，号替换为你的IP:Port, 在管理中心，点击“云缓存Memcached”，在云缓存 Memcached“管理视图”，可以看到系统分配的IP:Portsession.save_path = “…:*”设置一个合理时间，只缓存热点数据session.gc_maxlifetime = 1500代码中直接设置。ini_set(“session.save_handler”,”memcached”);ini_set(“session.save_path”,”…:**”);ini_set(“session.gc_maxlifetime”,1500);19. PHP实现接口20. 大文件读取使用fopen和fseek逐行或逐块读取","categories":[{"name":"PHP","slug":"PHP","permalink":"https://www.elonchung.cn/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://www.elonchung.cn/tags/PHP/"}]},{"title":"学会如何构建高性能MySQL系统","slug":"sql-optimize","date":"2017-07-10T01:31:05.000Z","updated":"2018-05-03T15:23:27.537Z","comments":true,"path":"2017/07/sql-optimize/","link":"","permalink":"https://www.elonchung.cn/2017/07/sql-optimize/","excerpt":"","text":"简介最近在压测新的存储，正好把工作过程中积累的对高性能MySQL相关的知识体系构建起来，做成思维导图的方式。总结乃一家之言，有不妥之处，望给位读者朋友指正。思维导图构建高性能MySQL系统涵盖从单机、硬件、OS、文件系统、内存到MySQL 本身的配置，以及schema 设计、索引设计 ，再到数据库架构上的水平和垂直拓展。内容展示硬件（1）CPUCPU亲和性：确保每个io都被其发起的CPU处理echo 2 &gt; /sys/block//queue/rq_affinity选择最大性能模式，避免节能模式导致性能不足关闭NUMA，降低swap概率numactl –interleave=all（2）RAID卡选择FORCE WB读写策略选择合适的充放电策略高IO，推荐RAID10空间需求大则RAID5操作系统（1）IO调度策略SSD/PCIE SSD推荐noop，其它推荐deadlineecho noop &gt; /sys/block//queue/scheduler（2）禁用块设备轮转模式echo 0 &gt; /sys/block//queue/rotational（3）内存vm.swappiness=0内存最大性能模式文件系统确保4K对⻬，如果使用全盘一个分区，例如mkfs.ext4 /dev/dfa也可以使用xfs 构建文件系统。禁止atime、diratimemount -o noatime -o nodiratime开启trimmount -o discard关闭barriermount -o barrier=0/dev/sdc1 /data ext4 defaults,noatime,nodiratime,nobarrier 0 0MySQL配置优化IO相关参数innodb_flush_method = O_DIRECTinnodb_read_io_threads = 16innodb_write_io_threads = 16innodb_io_capacity = 3000（PCIE卡建议更高）innodb_flush_neighbors=0InnoDB存储引擎在刷新一个脏页时，会检测该页所在区(extent)的所有页，如果是脏页，那么一起刷新。这样做的好处是通过AIO可以将多个IO写操作合并为一个IO操作。对于传统机械硬盘建议使用，而对于固态硬盘可以关闭innodb_flush_log_at_trx_commitredo 的刷盘策略sync_binlogbinlog 的刷盘策略innodb_log_buffer_size建议8-16M，有高TPS（比如大于6k）的可以提高到32M，系统tps越高设置可以设置的越大推荐文章： www.cnblogs.com/conanwang/p/5849437.html内存分配策略：jemalloc是BSD的提供的内存分配管理tcmalloc是google的内存分配管理模块ptmalloc是glibc的内存分配管理malloc-lib= /usr/lib64/libjemalloc.so.1系统资源：malloc-lib= /usr/lib64/libjemalloc.so.1back_log：大于max_connectionsthread_stack=192并发控制：使用thread_poolthread_cache_sizeschema优化索引优化目标：利用最小的索引成本找到最需要的行记录。原则：最左前缀原则：MySQL会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a=1 and b=2 and c&gt;3 and d=4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整避免重复索引：idx_abc多列索引,相当于创建了(a)单列索引，(a,b)组合索引以及(a,b,c)组合索引。不在索引列使用函数 如 max(id)&gt; 10 ,id+1&gt;3 等尽量选择区分度高的列作为前缀索引：区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少推荐文章：MySQL索引原理及慢查询优化http://tech.meituan.com/mysql-index.htmlMySQL索引实践http://blog.coderland.net/mysql/2015/08/26/MySQL%E7%B4%A2%E5%BC%95%E5%AE%9E%E8%B7%B5/由浅入深探究 MySQL索引结构原理、性能分析与优化http://blog.jobbole.com/87107/SQL开发优化不使用存储过程、触发器，自定义函数不使用全文索引不使用分区表针对OTLP业务尽量避免使用多表join和子查询不使用*,SELECT使用具体的列名：在发生列的增/删时，发生列名修改时，最大限度避免程序逻辑中没有修改导致的BUG，IN的元素个数300-500避免使用大事务，使用短小的事务：减少锁等待和竞争禁止使用%前缀模糊查询 where like ‘%xxx’禁止使用子查询，遇到使用子查询的情况，尽量使用join代替遇到分页查询，使用延迟关联解决：分页如果有大offset，可以先取Id，然后用主键id关联表会提高效率禁止并发执行count(*)，并发导致CPU飙高禁止使⽤order by rand()不使用负向查询，如 not in/like，使用in反向代替不要一次更新大量（大于30000条）数据，批量更新/删除SQL中使用到OR的改写为用 IN() （or的效率没有in的效率高）数据库架构单实例无法解决空间和性能需求时考虑拆分垂直拆分水平拆分引入缓存系统说明IO相关的优化可能还不完整，以后会逐步完善。关于数据库系统水平和垂直拆分是一个比较大的命题，这里略过，每个公司的业务规模不一样，选取的拆分策略也有所不同。","categories":[{"name":"数据库","slug":"数据库","permalink":"https://www.elonchung.cn/categories/数据库/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://www.elonchung.cn/tags/数据库/"}]},{"title":"基于RabbitMQ和Swoole实现的一个完整的异步任务系统","slug":"php-style","date":"2017-07-09T14:31:23.000Z","updated":"2018-05-03T15:23:51.577Z","comments":true,"path":"2017/07/php-style/","link":"","permalink":"https://www.elonchung.cn/2017/07/php-style/","excerpt":"","text":"从最开始的使用redis实现的单进程消费的异步任务系统到加入swoole的多进程消费模式，现在，我们的异步任务系统终于又能迈进一步。因为有了前面两个简单系统的经验，这回基于RabbitMQ的异步任务系统设计的的更加完善，包括多进程消费，异常重试等。系统介绍消费端架构图从图中可以看到，我们这个系统是一个基于事件的异步任务系统。就是说当一个事件产生时，生产者将事件抛给调度器，调度器负责查询事件下有哪些任务，然后将这些任务丢到相应的队列中，最后由消费者消费任务队列中的任务。在整个系统中主要分为三大部分1.事件生产者，即产生消息事件的一方。2.任务调度器(Scheduler)，负责注册事件并调度任务。3.消费者(Worker)，负责消费任务队列中的任务。事件生产者事件生产者很简单，在业务系统中直接调用即可，代码如下。123456789require_once __DIR__.'/../autoload.php';use Asynclib\\Ebats\\Event;try&#123; $event = new Event('order_paied'); //定义事件 $event-&gt;setOptions(['order_id' =&gt; 'FB138020392193312']); //事件产生的参数 $event-&gt;publish();&#125;catch (Exception $exc)&#123; echo $exc-&gt;getMessage();&#125;任务调度器调度器主要做两件事，一是注册事件，另一个是调度任务。注册事件代码如下：//注册事件EventManager::register(‘order_create’, ‘closeOrder’, ‘demo’, 10);//关闭未付款订单(延迟任务)EventManager::register(‘order_paied’, ‘virtualShipping’, ‘demo’); //虚拟商品自动发货这样就注册了两个事件，事件下各有一个任务。具体调度部分代码很简单，就不多赘述，有兴趣的可以去看代码。消费者重头戏来了，一个异步任务系统最重要的就是消费端了，现在让我们来看下Worker的流程图。一个完整的消费进程可以看到，在这里我们采用了两个交换器和两个队列，一个负责处理正常的任务即ntask，另一个负责处理需要延迟执行的任务即dtask。简单描述下一个任务的生命周期。正常任务task产生，进入正常任务的交换器Exchange[ebats_core_ntask]交换器根据topic将任务分发到对应的队列中子进程ntask阻塞等待成功获取到task，并执行该任务执行失败，需要重试时抛出RetryException，不需要重试时抛出TaskException子进程ntask捕获到重试异常将任务抛给延迟任务的交换器Exchange[ebats_core_dtask]将任务执行信息回调给上层开发者以便保存查看延迟任务子进程dtask阻塞等待成功获取到task，并执行该任务执行失败，需要重试时抛出RetryException，不需要重试时抛出TaskException子进程dtask捕获到重试异常将任务抛给延迟任务的交换器Exchange[ebats_core_dtask]将任务执行信息回调给上层开发者以便保存查看消费者代码如下：1234567891011require_once __DIR__.'/../autoload.php';require_once __DIR__.'/task/TaskDemoModel.php';use Asynclib\\Ebats\\Worker;//执行结果回调函数$callback = function ($topic, $taskid, $taskname, $params, $timeuse, $message)&#123;&#125;;$worker = new Worker($callback); //支持多进程消费默认为1$worker-&gt;setQueue('demo'); //队列名和事件的topic一一对应$worker-&gt;run();自定义调度器一般来说这是一个基于事件的任务系统，那么能不能直接产生任务呢。答案是肯定的。只需要创建一个自定义调度器，由您自行实现调度逻辑，最终生成一个任务即可。代码如下：123456789101112131415161718192021require_once __DIR__.'/../autoload.php';use Asynclib\\Ebats\\Task;use Asynclib\\Core\\Consumer;use Asynclib\\Amq\\ExchangeTypes;use Asynclib\\Exception\\ExceptionInterface;/** * 本示例演示了如何创建一个自定义调度器,开发者可以根据自身需求开发自己的任务调度器 */try&#123; $worker = new Consumer(); $worker-&gt;setExchange('order_fanout', ExchangeTypes::TOPIC); $worker-&gt;setQueue('shzf_order_paied', ['*.*.WAIT_SELLER_SEND_GOODS']); $worker-&gt;run(function($key, $msg)&#123; $order_data = json_encode($msg); echo \" [$key] $order_data \\n\"; Task::create('demo', 'orderAsync', $msg);//创建任务,之后消息将作为参数由任务接管处理 &#125;);&#125;catch (ExceptionInterface $exc)&#123; echo $exc-&gt;getMessage();&#125; 这样，当接收到消息时就会产生一个orderAsync的任务，您只需要启动一个用来消费这个Topic的Worker即可。也许你会觉得这里直接写业务逻辑的代码就可以了，实际上也确实可以。当你可以忍受一个进程慢慢消费的时候是可以这样做的。但大多数情况下我们还是希望它能够尽快的消费掉，所以建议这里只负责创建任务，具体任务的业务逻辑由worker去执行。","categories":[{"name":"PHP","slug":"PHP","permalink":"https://www.elonchung.cn/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://www.elonchung.cn/tags/PHP/"},{"name":"Swoole","slug":"Swoole","permalink":"https://www.elonchung.cn/tags/Swoole/"},{"name":"RabbitMQ","slug":"RabbitMQ","permalink":"https://www.elonchung.cn/tags/RabbitMQ/"}]},{"title":"Web 高效开发必备的 PHP 框架","slug":"framework","date":"2017-07-09T05:21:52.000Z","updated":"2018-05-03T15:25:51.348Z","comments":true,"path":"2017/07/framework/","link":"","permalink":"https://www.elonchung.cn/2017/07/framework/","excerpt":"","text":"多功能 THinkPHP 开源框架项目简介：使用 THinkPHP 开发项目的过程中把一些常用的功能或者第三方 sdk 整合好，开源供亲们参考，如 Auth 权限管理、支付宝、微信支付、阿里oss、友盟推送、融云即时通讯、云通讯短信、Email、Excel、PDF 等等。这些都是经过线上运营考验的，无毒害可以免费放心折腾使用。只要不会某一天找到我说因为借鉴了这个开源产品的一些方法，而导致了好几个亿的损失，要我负责并赔偿就好~ ￣へ￣此开源产品面向所有 THinkPHP 开发用户，因为我的基本思想是不改动框架的源文件，只是围绕着框架扩展，所以整合的这些功能都可以无痛兼容各种环境，既可以按照文章将整合的这些功能方便的移植到你已有的项目中，也可以直接以此项目为基础开发。项目地址基于 Laravel 的轻量级 web 部署系统 FixhubFixhub项目简介：Fixhub 是一款免费、开源，基于 Laravel 5.3 框架开发的 web 自动部署系统。目前实现的功能主要包括：支持 PHP、Python、JAVA、Ruby 等项目的发布。通过 SSH 将程序部署到多台服务器上。直接从 Git 仓库克隆项目代码并进行打包、安装。执行远程服务器 bash 命令。通过 Websocket 实现项目部署状态的实时跟踪。在服务器保留追溯版本记录，以便快速回滚。通过任务计划进行项目健康检测。可通过 webhook 触发部署。上线单申请、审核流程。Slack 和邮件通知。项目地址基于 Yii 框架协同办公管理系统 IBOS项目简介：IBOS 是一个基于PHP开发、Yii框架、免费开源的，快速、高效的协同办公管理系统。最新的 IBOS 为协同办公应用开发提供了强有力的支持，这些支持包括：复杂的用户组织结构管理支持。灵活和完善的角色权限控制体系，权限粒度支持到方法的权限设置。实用的功能和完善的插件机制。模块化的功能应用机制，可单独安装卸载单个应用。云平台支持-提供了对新浪 SAE 平台和本地环境双重支持的选择，具备“横跨性”和“平滑性”，支持本地化开发和调试以及部署切换。缓存支持-提供了包括文件、数据库、Memcache、Xcache、Redis 等多种类型的缓存支持。项目地址基于 CodeIgniter 框架的 CMS项目简介：菜鸟 CMS 是用 CodeIgniter + bootstrap2.0 面向开发人员的通用管理后台，视情况而定是否运用到你自己的项目中，其主要功能包括：权限模块会员模块文章模块幻灯片模块类别模块缓存模块日志模块系统设置项目地址基于 zend 开发的 CMF 系统项目简介：本项目是一个基于 zend framework 1.12.3 开发的 CMF 系统。在不改动 zend framework 代码的基础上构建的基于 app 的 CMF 系统。自带后台，以及安装模块。对 zend framework 的 ini 配置文件进行缓存，大大提高了 zend framework 的运行速度。巧妙的使用 zend framework 的 layout ,view 模块，使各 app 模块，可以使用全局 layout 进行布局，也可以 app 模块自定义的布局，（默认情况下 app 模块未定义 layout 布局将使用全局布局)。数据库通过定义可以开启读写分离功能，通过配置 ini 文件，可以很方便的分库，各分库之间的功能可以无缝调用。每个 app 模块包含有一个 library 库，各 app 模块 libray 库，可以互相调用，libray 分 dao,service,tool 三层结构，非常方便以后扩展。类库实现自动加载，不需要特意 include。等等还有许多其他功能，适合初学 zend framework 的开发人员学习以及高级开发人员在项目中使用。项目地址基于 phalcon 开发的内容管理系统项目简介：本项目是基于 Phalcon 开发的内容管理系统。 特性：继承 Phalcon 框架全功能。多网站支持，异站点用户文件、同网站私有/共有网站隔离。强大的个性化环境，每个用户可以对网站内容和表现形式进行个性化设置。基于用户角色、模块、角色的权限控制系统，当然，您也可以通过回调函数进行更精细控制。提供的站内搜索系统原生支持全文搜索。使用 volt 编写主题模板，类 twig 语法，单比 twig 更高效。Tolowan 提供的实体管理、字段管理、表单管理、模型管理等机制，可以大大缩减二次开发的难度和所需时间。项目地址","categories":[{"name":"PHP","slug":"PHP","permalink":"https://www.elonchung.cn/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://www.elonchung.cn/tags/PHP/"}]},{"title":"MySQL的子查询","slug":"zichaxun","date":"2017-07-09T05:21:52.000Z","updated":"2018-05-03T15:23:18.163Z","comments":true,"path":"2017/07/zichaxun/","link":"","permalink":"https://www.elonchung.cn/2017/07/zichaxun/","excerpt":"","text":"一、子查询定义定义：子查询允许把一个查询嵌套在另一个查询当中。子查询，又叫内部查询，相对于内部查询，包含内部查询的就称为外部查询。子查询可以包含普通select可以包括的任何子句，比如：distinct、 group by、order by、limit、join和union等；但是对应的外部查询必须是以下语句之一：select、insert、update、delete、set或 者do。子查询的位置： select 中、from 后、where 中.group by 和order by 中无实用意义。二、子查询分类子查询分为如下几类：标量子查询：返回单一值的标量，最简单的形式。列子查询：返回的结果集是 N 行一列。行子查询：返回的结果集是一行 N 列。表子查询：返回的结果集是 N 行 N 列。可以使用的操作符：= &gt; &lt; &gt;= &lt;= &lt;&gt; ANY IN SOME ALL EXISTS一个子查询会返回一个标量（就一个值）、一个行、一个列或一个表，这些子查询称之为标量、行、列和表子查询。如果子查询返回一个标量值（就一个值），那么外部查询就可以使用：=、&gt;、&lt;、&gt;=、&lt;=和&lt;&gt;符号进行比较判断；如果子查询返回的不是一个标量值，而外部查询使用了比较符和子查询的结果进行了比较，那么就会抛出异常。标量子查询：是指子查询返回的是单一值的标量，如一个数字或一个字符串，也是子查询中最简单的返回形式。 可以使用 = &gt; &lt; &gt;= &lt;= &lt;&gt; 这些操作符对子查询的标量结果进行比较，通常子查询的位置在比较式的右侧示例：123456SELECT * FROM article WHERE uid = (SELECT uid FROM user WHERE status=1 ORDER BY uid DESC LIMIT 1)SELECT * FROM t1 WHERE column1 = (SELECT MAX(column2) FROM t2)SELECT * FROM article AS t WHERE 2 = (SELECT COUNT(*) FROM article WHERE article.uid = t.uid)MySQL 列子查询：指子查询返回的结果集是 N 行一列，该结果通常来自对表的某个字段查询返回。可以使用 = &gt; &lt; &gt;= &lt;= &lt;&gt; 这些操作符对子查询的标量结果进行比较，通常子查询的位置在比较式的右侧可以使用 IN、ANY、SOME 和 ALL 操作符，不能直接使用 = &gt; &lt; &gt;= &lt;= &lt;&gt; 这些比较标量结果的操作符。示例：12345SELECT * FROM article WHERE uid IN(SELECT uid FROM user WHERE status=1)SELECT s1 FROM table1 WHERE s1 &gt; ANY (SELECT s2 FROM table2)SELECT s1 FROM table1 WHERE s1 &gt; ALL (SELECT s2 FROM table2)NOT IN 是 &lt;&gt; ALL 的别名，二者相同。特殊情况:如果 table2 为空表，则 ALL 后的结果为 TRUE；如果子查询返回如 (0,NULL,1) 这种尽管 s1 比返回结果都大，但有空行的结果，则 ALL 后的结果为 UNKNOWN 。注意：对于 table2 空表的情况，下面的语句均返回 NULL：12SELECT s1 FROM table1 WHERE s1 &gt; (SELECT s2 FROM table2)SELECT s1 FROM table1 WHERE s1 &gt; ALL (SELECT MAX(s1) FROM table2)MySQL 行子查询：指子查询返回的结果集是一行 N 列，该子查询的结果通常是对表的某行数据进行查询而返回的结果集。123456例子：SELECT * FROM table1 WHERE (1,2) = (SELECT column1, column2 FROM table2)注：(1,2) 等同于 row(1,2)SELECT * FROM article WHERE (title,content,uid) = (SELECT title,content,uid FROM blog WHERE bid=2)MySQL 表子查询：指子查询返回的结果集是 N 行 N 列的一个表数据。例子：1SELECT * FROM article WHERE (title,content,uid) IN (SELECT title,content,uid FROM blog)三、字查询例举ANY进行子查询any关键词的意思是“对于子查询返回的列中的任何一个数值，如果比较结果为TRUE，就返回TRUE”。好比“10 &gt;any(11, 20, 2, 30)”，由于10&gt;2，所以，该该判断会返回TRUE；只要10与集合中的任意一个进行比较，得到TRUE时，就会返回TRUE。1234567891011select table1.customer_id,city,count(order_id)from table1 join table2on table1.customer_id=table2.customer_idwhere table1.customer_id&lt;&gt;&apos;tx&apos; and table1.customer_id&lt;&gt;&apos;9you&apos;group by customer_idhaving count(order_id) &gt;any (select count(order_id)from table2where customer_id=&apos;tx&apos; or customer_id=&apos;9you&apos;group by customer_id);any的意思比较好明白，直译就是任意一个，只要条件满足任意的一个，就返回TRUE。使用IN进行子查询使用in进行子查询，这个我们在日常写sql的时候是经常遇到的。in的意思就是指定的一个值是否在这个集合中，如何在就返回TRUE；否则就返回FALSE了。in是“=any”的别名，在使用“=any”的地方，我们都可以使用“in”来进行替换。有了in，肯定就有了not in；not in并不是和&lt;&gt;any是同样的意思，not in和&lt;&gt;all是一个意思。使用SOME进行子查询some是any的别名，用的比较少。使用ALL进行子查询all必须与比较操作符一起使用。all的意思是“对于子查询返回的列中的所有值，如果比较结果为TRUE，则返回TRUE”。好比“10 &gt;all(2, 4, 5, 1)”，由于10大于集合中的所有值，所以这条判断就返回TRUE；而如果为“10 &gt;all(20, 3, 2, 1, 4)”，这样的话，由于10小于20，所以该判断就会返回FALSE。&lt;&gt;all的同义词是not in，表示不等于集合中的所有值，这个很容易和&lt;&gt;any搞混，平时多留点心就好了。标量子查询根据子查询返回值的数量，将子查询可以分为标量子查询和多值子查询。在使用比较符进行子查询时，就要求必须是标量子查询；如果是多值子查询时，使用比较符，就会抛出异常。多值子查询与标量子查询对应的就是多值子查询了，多值子查询会返回一列、一行或者一个表，它们组成一个集合。我们一般使用的any、in、all和some等词，将外部查询与子查询的结果进行判断。如果将any、in、all和some等词与标量子查询，就会得到空的结果。独立子查询独立子查询是不依赖外部查询而运行的子查询。什么叫依赖外部查询？先看下面两个sql语句。sql语句1：获得所有hangzhou顾客的订单号。12345678910111213141516select order_idfrom table2where customer_id in (select customer_id from table1 where city=&apos;hangzhou&apos;);sql语句2：获得城市为hangzhou，并且存在订单的用户。select *from table1where city=&apos;hangzhou&apos; and exists (select * from table2 where table1.customer_id=table2.customer_id);上面的两条sql语句，虽然例子举的有点不是很恰当，但是足以说明这里的问题了。对于sql语句1，我们将子查询单独复制出来，也是可以单独执行的，就是子查询与外部查询没有任何关系。对于sql语句2，我们将子查询单独复制出来，就无法单独执行了，由于sql语句2的子查询依赖外部查询的某些字段，这就导致子查询就依赖外部查询，就产生了相关性。对于子查询，很多时候都会考虑到效率的问题。当我们执行一个select语句时，可以加上explain关键字，用来查看查询类型，查询时使用的索引以及其它等等信息。比如这么用：123456explain select order_id from table2 where customer_id in (select customer_id from table1 where city=&apos;hangzhou&apos;);使用独立子查询，如果子查询部分对集合的最大遍历次数为n，外部查询的最大遍历次数为m时，我们可以记为：O(m+n)。而如果使用相关子查询，它的遍历 次数可能会达到O(m+m*n)。可以看到，效率就会成倍的下降；所以，大伙在使用子查询时，一定要考虑到子查询的相关性。相关子查询相关子查询是指引用了外部查询列的子查询，即子查询会对外部查询的每行进行一次计算。但是在MySQL的内部，会进行动态优化，会随着情况的不同会 有所不同。使用相关子查询是最容易出现性能的地方。而关于sql语句的优化，这又是一个非常大的话题了，只能通过实际的经验积累，才能更好的去理解如何进 行优化。EXISTS谓词EXISTS是一个非常牛叉的谓词，它允许数据库高效地检查指定查询是否产生某些行。根据子查询是否返回行，该谓词返回TRUE或FALSE。与其 它谓词和逻辑表达式不同的是，无论输入子查询是否返回行，EXISTS都不会返回UNKNOWN，对于EXISTS来说，UNKNOWN就是FALSE。 还是上面的语句，获得城市为hangzhou，并且存在订单的用户。123456select *from table1where city=&apos;hangzhou&apos; and exists (select * from table2 where table1.customer_id=table2.customer_id);关于IN和EXISTS的主要区别在于三值逻辑的判断上。EXISTS总是返回TRUE或FALSE，而对于IN，除了TRUE、FALSE值外， 还有可能对NULL值返回UNKNOWN。但是在过滤器中，UNKNOWN的处理方式与FALSE相同，因此使用IN与使用EXISTS一样，SQL优化 器会选择相同的执行计划。说到了IN和EXISTS几乎是一样的，但是，就不得不说到NOT IN和NOT EXISTS，对于输入列表中包含NULL值时，NOT EXISTS和NOT IN之间的差异就表现的非常大了。输入列表包含NULL值时，IN总是返回TRUE和UNKNOWN，因此NOT IN就会得到NOT TRUE和NOT UNKNOWN，即FALSE和UNKNOWN。派生表上面也说到了，在子查询返回的值中，也可能返回一个表，如果将子查询返回的虚拟表再次作为FROM子句的输入时，这就子查询的虚拟表就成为了一个派生表。语法结构如下：1FROM (subquery expression) AS derived_table_alias由于派生表是完全的虚拟表，并没有也不可能被物理地具体化。四、子查询优化很多查询中需要使用子查询。使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死。子查询可以使查询语 句很灵活，但子查询的执行效率不高。子查询时，MySQL需要为内层查询语句的查询结果建立一个临时表。然后外层查询语句再临时表中查询记录。查询完毕 后，MySQL需要撤销这些临时表。因此，子查询的速度会受到一定的影响。如果查询的数据量比较大，这种影响就会随之增大。在MySQL中可以使用连接查 询来替代子查询。连接查询不需要建立临时表，其速度比子查询要快。使用连接(JOIN)来代替子查询如：12345678910111213141516171819例子1： SELECT * FROM t1WHERE t1.a1 NOT in (SELECT a2 FROM t2 ) 优化后： SELECT * FROM t1LEFT JOIN t2 ON t1.a1=t2.a2WHERE t2.a2 IS NULL 例子2：SELECT * FROM article WHERE (title,content,uid) IN (SELECT title,content,uid FROM blog) 优化后：SELECT * FROM articleinner join blogon (article.title=blog.title AND article.content=blog.content AND article.uid=blog.uid)不能优化的子查询：mysql不支持子查询合并和聚合函数子查询优化，mariadb对聚合函数子查询进行物化优化；mysql不支持from子句子查询优化，mariadb对from子句子查询进行子查询上拉优化；mysql和mariadb对子查询展开提供有限的支持，如对主键的操作才能进行上拉子查询优化；mysql不支持exists子查询优化，mariadb对exists关联子查询进行半连接优化，对exists非关联子查询没有进一步进行优化；mysql和mariadb不支持not exists子查询优化；mysql和mariadb对in子查询，对满足半连接语义的查询进行半连接优化，再基于代价评估进行优化，两者对半连接的代价评估选择方式有差异；mysql不支持not in子查询优化，mariadb对非关联not in子查询使用物化优化，对关联not in子查询不做优化；mysql和mariadb对&gt;all非关联子查询使用max函数，&lt;all非关联子查询使用min函数，对=all和非关联子查询使用exists优化；对&gt;some和&gt;any非关联子查询使用min函数，对&lt;some和&lt;any非关联子查询使用max函数，=any 和=some子查询使用半连接进行优化，对&gt;some和&gt;any关联子查询以及&lt;some和&lt;any关联子查询只有exists 优化。","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://www.elonchung.cn/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://www.elonchung.cn/tags/MySQL/"}]},{"title":"hexo使用jenkins自动部署到阿里云","slug":"jenkis","date":"2017-07-01T10:21:52.000Z","updated":"2018-04-25T04:05:19.220Z","comments":true,"path":"2017/07/jenkis/","link":"","permalink":"https://www.elonchung.cn/2017/07/jenkis/","excerpt":"","text":"hexo使用jenkins自动部署到阿里云","categories":[{"name":"小公举","slug":"小公举","permalink":"https://www.elonchung.cn/categories/小公举/"}],"tags":[{"name":"小公举","slug":"小公举","permalink":"https://www.elonchung.cn/tags/小公举/"}]},{"title":"HTTP协议详解之消息报头篇","slug":"http-msg","date":"2017-06-30T08:54:28.000Z","updated":"2018-05-03T15:31:01.514Z","comments":true,"path":"2017/06/http-msg/","link":"","permalink":"https://www.elonchung.cn/2017/06/http-msg/","excerpt":"","text":"HTTP协议详解之消息报头篇HTTP消息由客户端到服务器的请求和服务器到客户端的响应组成。请求消息和响应消息都是由开始行（对于请求消息，开始行就是请求行，对于响应消息，开始行就是状态行），消息报头（可选），空行（只有CRLF的行），消息正文（可选）组成。HTTP消息报头包括普通报头、请求报头、响应报头、实体报头。每一个报头域都是由名字+“：”+空格+值 组成，消息报头域的名字是大小写无关的。普通报头在普通报头中，有少数报头域用于所有的请求和响应消息，但并不用于被传输的实体，只用于传输的消息。eg：Cache-Control 用于指定缓存指令，缓存指令是单向的（响应中出现的缓存指令在请求中未必会出现），且是独立的（一个消息的缓存指令不会影响另一个消息处理的缓存机制），HTTP1.0使用的类似的报头域为Pragma。请求时的缓存指令包括：no-cache（用于指示请求或响应消息不能缓存）、no-store、max-age、max-stale、min-fresh、only-if-cached;响应时的缓存指令包括：public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age、s-maxage.eg：为了指示IE浏览器（客户端）不要缓存页面，服务器端的JSP程序可以编写如下：response.sehHeader(“Cache-Control”,”no-cache”);//response.setHeader(“Pragma”,”no-cache”);作用相当于上述代码，通常两者//合用这句代码将在发送的响应消息中设置普通报头域：Cache-Control:no-cacheDate普通报头域表示消息产生的日期和时间Connection普通报头域允许发送指定连接的选项。例如指定连接是连续，或者指定“close”选项，通知服务器，在响应完成后，关闭连接请求报头请求报头允许客户端向服务器端传递请求的附加信息以及客户端自身的信息。常用的请求报头AcceptAccept请求报头域用于指定客户端接受哪些类型的信息。eg：Accept：image/gif，表明客户端希望接受GIF图象格式的资源；Accept：text/html，表明客户端希望接受html文本。Accept-CharsetAccept-Charset请求报头域用于指定客户端接受的字符集。eg：Accept-Charset:iso-8859-1,gb2312.如果在请求消息中没有设置这个域，缺省是任何字符集都可以接受。Accept-EncodingAccept-Encoding请求报头域类似于Accept，但是它是用于指定可接受的内容编码。eg：Accept-Encoding:gzip.deflate.如果请求消息中没有设置这个域服务器假定客户端对各种内容编码都可以接受。Accept-LanguageAccept-Language请求报头域类似于Accept，但是它是用于指定一种自然语言。eg：Accept-Language:zh-cn.如果请求消息中没有设置这个报头域，服务器假定客户端对各种语言都可以接受。AuthorizationAuthorization请求报头域主要用于证明客户端有权查看某个资源。当浏览器访问一个页面时，如果收到服务器的响应代码为401（未授权），可以发送一个包含Authorization请求报头域的请求，要求服务器对其进行验证。Host（发送请求时，该报头域是必需的）Host请求报头域主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的，eg：我们在浏览器中输入：http://www.guet.edu.cn/index.html浏览器发送的请求消息中，就会包含Host请求报头域，如下：Host：www.guet.edu.cn此处使用缺省端口号80，若指定了端口号，则变成：Host：www.guet.edu.cn:指定端口号User-Agent我们上网登陆论坛的时候，往往会看到一些欢迎信息，其中列出了你的操作系统的名称和版本，你所使用的浏览器的名称和版本，这往往让很多人感到很神奇，实际上，服务器应用程序就是从User-Agent这个请求报头域中获取到这些信息。User-Agent请求报头域允许客户端将它的操作系统、浏览器和其它属性告诉服务器。不过，这个报头域不是必需的，如果我们自己编写一个浏览器，不使用User-Agent请求报头域，那么服务器端就无法得知我们的信息了。请求报头举例：GET /form.html HTTP/1.1 (CRLF)Accept:image/gif,image/x-xbitmap,image/jpeg,application/x-shockwave-flash,application/vnd.ms-excel,application/vnd.ms-powerpoint,application/msword,/ (CRLF)Accept-Language:zh-cn (CRLF)Accept-Encoding:gzip,deflate (CRLF)If-Modified-Since:Wed,05 Jan 2007 11:21:25 GMT (CRLF)If-None-Match:W/“80b1a4c018f3c41:8317” (CRLF)User-Agent:Mozilla/4.0(compatible;MSIE6.0;Windows NT 5.0) (CRLF)Host:www.guet.edu.cn (CRLF)Connection:Keep-Alive (CRLF)(CRLF)响应报头响应报头允许服务器传递不能放在状态行中的附加响应信息，以及关于服务器的信息和对Request-URI所标识的资源进行下一步访问的信息。常用的响应报头LocationLocation响应报头域用于重定向接受者到一个新的位置。Location响应报头域常用在更换域名的时候。ServerServer响应报头域包含了服务器用来处理请求的软件信息。与User-Agent请求报头域是相对应的。下面是Server响应报头域的一个例子：Server：Apache-Coyote/1.1WWW-AuthenticateWWW-Authenticate响应报头域必须被包含在401（未授权的）响应消息中，客户端收到401响应消息时候，并发送Authorization报头域请求服务器对其进行验证时，服务端响应报头就包含该报头域。eg：WWW-Authenticate:Basic realm=”Basic Auth Test!” //可以看出服务器对请求资源采用的是基本验证机制。实体报头请求和响应消息都可以传送一个实体。一个实体由实体报头域和实体正文组成，但并不是说实体报头域和实体正文要在一起发送，可以只发送实体报头域。实体报头定义了关于实体正文（eg：有无实体正文）和请求所标识的资源的元信息。常用的实体报头Content-EncodingContent-Encoding实体报头域被用作媒体类型的修饰符，它的值指示了已经被应用到实体正文的附加内容的编码，因而要获得Content-Type报头域中所引用的媒体类型，必须采用相应的解码机制。Content-Encoding这样用于记录文档的压缩方法，eg：Content-Encoding：gzipContent-LanguageContent-Language实体报头域描述了资源所用的自然语言。没有设置该域则认为实体内容将提供给所有的语言阅读者。eg：Content-Language:daContent-LengthContent-Length实体报头域用于指明实体正文的长度，以字节方式存储的十进制数字来表示。Content-TypeContent-Type实体报头域用语指明发送给接收者的实体正文的媒体类型。eg：Content-Type:text/html;charset=ISO-8859-1Content-Type:text/html;charset=GB2312Last-ModifiedLast-Modified实体报头域用于指示资源的最后修改日期和时间。ExpiresExpires实体报头域给出响应过期的日期和时间。为了让代理服务器或浏览器在一段时间以后更新缓存中(再次访问曾访问过的页面时，直接从缓存中加载，缩短响应时间和降低服务器负载)的页面，我们可以使用Expires实体报头域指定页面过期的时间。eg：Expires：Thu，15 Sep 2006 16:23:12 GMTHTTP1.1的客户端和缓存必须将其他非法的日期格式（包括0）看作已经过期。eg：为了让浏览器不要缓存页面，我们也可以利用Expires实体报头域，设置为0，jsp中程序如下：response.setDateHeader(“Expires”,”0”);","categories":[{"name":"HTTP","slug":"HTTP","permalink":"https://www.elonchung.cn/categories/HTTP/"}],"tags":[{"name":"HTTP","slug":"HTTP","permalink":"https://www.elonchung.cn/tags/HTTP/"}]},{"title":"轻松理解HTTP基本知识","slug":"http","date":"2017-06-30T03:34:50.000Z","updated":"2018-05-03T15:31:13.296Z","comments":true,"path":"2017/06/http/","link":"","permalink":"https://www.elonchung.cn/2017/06/http/","excerpt":"","text":"引言HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。HTTP协议的特点支持客户/服务器模式。简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。HTTP协议的应用场景Web service、WSDL、小偷程序、采集程序、爬虫程序、socket、防盗链http协议执行的粗糙流程chrome搜索自身的DNS缓存搜索操作系统自身的DNS缓存（浏览器没有找到缓存或缓存已经失效，缓存时间大概只有一分钟）读取本地host文件浏览器发起一个DNS 的一个系统调用宽带运营商服务器查询本地缓存运营商服务器发起一个迭代DNS解析请求1. 运营商服务器把结果返回操作系统内核同时缓存起来 2. 操作系统内核把结果返回浏览器 3. 最终浏览器那桐了xxx.abc.com对应的ip地址 浏览器获得域名对应的ip地址后，发起http“三次握手”TCP/IP连接建立起来，浏览器就可以向服务器发送http请求了使用了比如说，用http的get方式请求一个根域里的一个域名，协议可以采用HTTP 1.1 的一个协议服务器端接受到了这个请求，根据路径参数，经过后端的一些处理之后，把处理后的一个结果的数据返回给浏览器，如果是网站的页面就会把完整的HTML页面代码返回给浏览器。浏览器拿到了网站的完整的HTML页面代码，在解析和渲染这个页面的时候，里面的JS,CSS,图片静态资源，他们同样也是一个HTTP请求，同需要经过上面的主要七个步骤。浏览器根据拿到的资源对页面进行渲染，最终把一个完整的页面呈现给用户http协议的组成部分HTTP协议主要可以拆分两大模块 “请求”与“响应”， 他们都具备 HTTP头 和 正文信息详细的消息报头解释可跳步《HTTP协议详解之消息报头篇》客户端 请求报文信息报文首部(HTTP头)请求行：包栝请求方法，URL和HTTP协议版本请求首部字段、通用首部字段、实体首部字段、其他（包括请求的各种条件和属性【值键值对】)空行（CR+LF）报文主体（正文信息【即用户提交的表单数据】）服务端 响应报文信息报文首部(HTTP头)状态行：包括响应结果的HTTP协议版本、状态码、状态描述响应首部字段、通用首部字段、实体首部字段、其他（包括响应的各种条件和属性【值键值对】)空行（CR+LF）报文主体（正文信息【即服务端返回的数据】）telnet执行的代码案例1234567891011121314151617181920POST /test.php HTTP/1.1 (CRLF) &lt;请求行&gt; host:localhost (CRLF) &lt;请求条件和属性&gt; Accept-Language:zh-cn (CRLF)Accept-Encoding:gzip,deflate (CRLF)If-Modified-Since:Thu,08 Mar 201507:17:51 GMT (CRLF)If-None-Match:W/\"80b1a4c018f3c41:8317\" (CRLF)Connection:Keep-Alive (CRLF)(CRLF)v:1.0 &lt;请求报文主体&gt;HTTP/1.1 200 OK &lt;状态行&gt; Server: nginx &lt;响应条件和属性&gt; Date: Thu,08 Mar 201507:17:52 GMTConnection: Keep-Alive Content-Length: 23330Content-Type: text/htmlCache-control: privatehttp test &lt;响应报文主体&gt;http请求方法请求方法（所有方法全为大写）有多种，各个方法的解释如下：GET 请求获取Request-URI所标识的资源POST 在Request-URI所标识的资源后附加新的数据HEAD 请求获取由Request-URI所标识的资源的响应消息报头PUT 请求服务器存储一个资源，并用Request-URI作为其标识DELETE 请求服务器删除Request-URI所标识的资源TRACE 请求服务器回送收到的请求信息，主要用于测试或诊断CONNECT 保留将来使用OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求响应状态码状态代码有三位数字组成，第一个数字定义了响应的类别，且有五种可能取值：1xx：指示信息–表示请求已接收，继续处理2xx：成功–表示请求已被成功接收、理解、接受3xx：重定向–要完成请求必须进行更进一步的操作4xx：客户端错误–请求有语法错误或请求无法实现5xx：服务器端错误–服务器未能实现合法的请求常见状态代码、状态描述、说明：200 OK //客户端请求成功400 Bad Request //客户端请求有语法错误，不能被服务器所理解401 Unauthorized //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用403 Forbidden //服务器收到请求，但是拒绝提供服务404 Not Found //请求资源不存在，eg：输入了错误的URL500 Internal Server Error //服务器发生不可预期的错误503 Server Unavailable //服务器当前不能处理客户端的请求，一段时间后可能恢复正常","categories":[{"name":"HTTP","slug":"HTTP","permalink":"https://www.elonchung.cn/categories/HTTP/"}],"tags":[{"name":"HTTP","slug":"HTTP","permalink":"https://www.elonchung.cn/tags/HTTP/"}]},{"title":"Hexo利用Github分支在不同电脑上写博客","slug":"hexo-branch","date":"2017-06-30T00:49:53.000Z","updated":"2018-05-03T15:25:35.609Z","comments":true,"path":"2017/06/hexo-branch/","link":"","permalink":"https://www.elonchung.cn/2017/06/hexo-branch/","excerpt":"","text":"Hexo是一个很好的开源博客框架，支持Markdown的写作方式，并且可以与Github Page协作轻松搭建博客，非常适合展示性的个人博客。Hexo通过将Markdown文件编译成html文件，然后将html文件直接部署到网站上，所以被称作静态博客，因为直接就是访问的最终的html文件，不会有PHP那样的中间处理，所以对浏览器来讲会比较快。当然，这种方式也有缺点，一是Github毕竟部署在国外，而且访问偶尔会抽风，所以速度无法保障；二是所有的静态页面由于都需要保存在github里的自己名下的网站同名项目仓库内，所以如果项目仓库是public的，那么所有人都会看到你的网站代码， 这个其实应该也没有关系吧！！！hexo都是开源的，而且静态博客是编译后的，框架和主题都是用的别人开源出来的，但博客写了不就是让别人看的？所以应该真的无所谓。。。如果你实在不想让别人看到你的md原件，那么就不要使用本文所说的同一个项目的分支啦，就去新建一个项目来单独保存源码文件吧，并且把这个项目设为priviate的，要花钱的哦，这样别人就看不到啦。。。下面进入正题， 利用github的不同分支来分别保存网站静态文件与hexo源码（md原始文件及主题等），实现在不同电脑上都可以自由写博客Github Page这里假设你已经在github上建好了page的仓库，也就是 “yourusername.github.io”的名字的项目仓库，比如我的 dxjia.github.io 。另外，也假设你在自己的电脑上已经配置好git、hexo、node js等环境。新建hexo分支仓库建好之后，都是默认一个 master 分支的，Github page要求你的网站文件必须存放在这个 master 分支上，这个没得选；所以我们需要新建另外一个分支来保存我们的hexo原始文件；设置默认分支因为我们写博客更多的是更新这个分支，网站文件所在的 master 分支则由 hexo d 命令发布文章的时候进行推送，所以我们将 hexo分支设置为默认分支，这样我们在新的电脑环境下 git clone 该仓库时，自动切到 hexo`分支。配置hexo deploy参数为了保证 hexo d 命令可以正确部署到 master 分支，在hexo 的配置文件 _config.yml 文件中配置参数如下：deploy:type: gitrepo: https://github.com/dxjia/dxjia.github.io.gitbranch: masterhexo 3.0之后 deploy type，将github改为了git，这样适用性更广了，如果你发现无法 hexo d ，使用下面的命令安装git deployer插件后重试即可。npm install hexo-deployer-git –save修改推送到hexo分支上一步的deploy参数正确配置后，文章写完使用 hexo g -d 命令就可以直接部署了，生成的博客静态文件会自动部署到 username.github.io 仓库的 master 分支上，这时候通过浏览器访问 http://username.github.io 就可以看到你的博客页面里。网站页面是保存了，但这时候我们还没有保存我们的hexo原始文件，包括我们的文章md文件，我们千辛万苦修改的主题配置等。。。接下来使用下面的步骤将他们都统统推送到 hexo 分支上去git add .git commit -m “change description”git push origin hexo这样就OK了，我们的原始文件就都上去了，换电脑也不怕了。日常写博客有时候我们可能会在不同的电脑上写博客，那在不同的电脑上配置 hexo、git、node.js，以及配置git ssh key等都要折腾一下的，这是免不了的，也是比wordpress等其他博客框架麻烦的一点。已有环境如果在电脑上已经写过博客，那么可以在已有的工作目录下同步之前写的博客。在你的仓库目录下右键’git bash shell’，起来bash命令行，然后git pull这样你的状态就更新了，之后就是 hexo 命令写文章啦。。。写完 hexo g -d 部署好后，使用git add .git commit -m “change description”git push origin hexo推送上去。新的环境到了新的电脑上时，我们需要将项目先下载到本地，然后再进行hexo初始化。git clone https://github.com/dxjia/dxjia.github.io.gitcd dxjia.github.ionpm install hexonpm installnpm install hexo-deployer-git –save之后开始写博客，写好部署好之后，别忘记 git add , ….git push origin hexo…推上去。。。","categories":[{"name":"Git","slug":"Git","permalink":"https://www.elonchung.cn/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://www.elonchung.cn/tags/Git/"}]},{"title":"Markdown","slug":"markdown","date":"2017-06-29T08:54:50.000Z","updated":"2018-02-27T05:38:31.850Z","comments":true,"path":"2017/06/markdown/","link":"","permalink":"https://www.elonchung.cn/2017/06/markdown/","excerpt":"","text":"Markdown 语法使用手册","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://www.elonchung.cn/tags/Markdown/"}]},{"title":"hexo使用","slug":"hexo","date":"2017-06-29T05:21:52.000Z","updated":"2018-05-03T15:25:19.348Z","comments":true,"path":"2017/06/hexo/","link":"","permalink":"https://www.elonchung.cn/2017/06/hexo/","excerpt":"","text":"自己也算是摸爬滚打搭建成功，然后自己再重新安装部署一遍，把完整步骤分享给大家，同时最后有一些连接，如果我的步骤不行，大家可以参考其他人的（这个有点花费时间，大家提前有个心理准备 - _-）安装hexo安装要求（以下为下载链接 安装步骤省略 ）：下载安装Git下载安装node.js1、创建文件夹（我的是在E盘创建的Hexo）利用 npm 命令即可安装。在文件夹空白位置点击鼠标右键，选择Git Bash在电脑任意位置右键2、输入命令：1npm install -g hexo注意：-g是指全局安装hexo--save是指项目独立安装hexo。初始化Hexo与使用1、初始化成功后生成的一些列文件在Hexo文件下，右键运行Git Bash，输入命令：1hexo init2、获取主题next ，修改基础配置其中可以在这里浏览更多主题，然后在Hexo文件夹下 Git Bash输入命令：1git clone https://github.com/iissnan/hexo-theme-nextthemes/next（next为主题名字），来获得更多主题下载成功（如果需要更改主题，请在_cofig.yml修改theme）在_config.yml，进行基础配置3、本地浏览博客分别输入 如下命令：123hexo g hexo s这里有更多hexo常用命令在浏览器输入：localhost：4000 ，就可以进行访问，效果如下：效果图4、写文章在E:\\Hexo\\source_posts文件下，新建.md文件就可以写文章新建hexo.md文件123456789---title: hexo使用date: 2018-04-09 13:21:52categories: - 小公举 - 博客tags:- 小公举---浏览效果部署到Github上1、申请Github账号，（注意别忘了进行账号邮箱验证）2、new repository3、在_config.yml进行配置（注意：要保存）4、安装hexo-deployer-git自动部署发布工具在Hexo文件夹下 Git Bash1npm instal lhexo-deployer-git --save5、发布到Github输入如下命令：1234567清理缓存文件hexo clean构建及部署到github上hexo g -d或者hexo d -g第一次发布需要验证github账号发布完成在仓库中我们也可以看到6、如需要验证ssh浏览这个教程7、测试访问在浏览器输入：https://zhongweixiang.github.io/","categories":[{"name":"小公举","slug":"小公举","permalink":"https://www.elonchung.cn/categories/小公举/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://www.elonchung.cn/tags/hexo/"}]},{"title":"学习资源","slug":"phpstudy","date":"2017-06-28T05:10:09.000Z","updated":"2018-05-03T15:23:43.865Z","comments":true,"path":"2017/06/phpstudy/","link":"","permalink":"https://www.elonchung.cn/2017/06/phpstudy/","excerpt":"","text":"PHP学习资料区yii2干货集各类技术干货（国人）各类技术干货（英文）大前端工具集","categories":[{"name":"学习资料","slug":"学习资料","permalink":"https://www.elonchung.cn/categories/学习资料/"}],"tags":[{"name":"资料","slug":"资料","permalink":"https://www.elonchung.cn/tags/资料/"}]},{"title":"大前端工具集——收藏","slug":"front-tool","date":"2017-06-27T17:16:28.000Z","updated":"2018-05-03T15:25:44.539Z","comments":true,"path":"2017/06/front-tool/","link":"","permalink":"https://www.elonchung.cn/2017/06/front-tool/","excerpt":"","text":"大前端工具集本篇文章记录了一枚程序猿的百宝箱。PS：每个分类的都按照推荐的先后排列。主要内容是一些使用过的库、工具、套路或关注的前端组织等等，反正用 前端瑞士军刀 来总结这篇文章再合适不过鸟。前端组织/前端博客虽混过外企俩家，但劳资英文这项的技能点还是灰色的…so，俺关注的站点主要以中文为主GitHub - 没 Git 都不好意思面基有木有！！！MDN - 无数的资源再等着你探索，追标准和新特性肯定得关注的网站Awesomes.cn - 国人维护的前端资源库，深度对接到 Github，分类和展现清晰，值得收藏如何跟上前端开发的最新前沿 - RT，不解释慕课 - 大量的在线计算机课程。 虽然初、中级居多，但是不乏有巨作值得细细品尝阮一峰 - 关注多年，拜读其 ES6 系列。虽网传靠写书进鸟阿里，但博客内容确实够丰富W3Cplus - 大漠(《图解 CSS3》作者)在国内的影响力杠杠的，Sass 专家级淘宝前端团队 - 内容涵盖 Web 和 Node，要深度游深度，要广度有广度奇舞团博客 - 坚持是最宝贵的，别人的奇舞周刊早已经过百期了百度 FEX - 代表作 FIS、UEditor、WebUploader、KityMinder腾讯全端 AlloyTeam - 腾讯 Web 前端团队，博客真的有点丑…粉丝日志 for 张丹 - 大爱作者写的 Node 系列张鑫旭 - 成名多年的、高产的前端大湿，CSS猛人博客搭建hexo - 快速、简洁且高效的博客框架jekyll - 将纯文本转化为静态网站和博客GithubPages - 免费的静态站点。配合着 hexo 或 jekyll 的模板，分分搭建出一套炫酷的个人博客Tumblr - 轻博客的祖师爷，各种各样的主题感觉不错Wordpress - 这玩意古老到都不想介绍使用 hexo/jekyll + GitPage，前端搭建静态博客那是相当 easy。用 Markdown 写文章做记录，再 push 到 Git 上，分分钟高大上有木有HTML/CSSHEAD - 最全的 &amp;lt;head&amp;gt; 列表，真心佩服这种偏执的整理能力MetroUI - 好看好用，重点是样式特别、个性LoadersCSS - 用 CSS 技术实现 loading 动画； 补一句，想熟悉、理解 keyframes、animation、transform、transition 的童鞋可以直接去读其源码(只有千把行代码)，读完就算出师鸟:)WeUI - 一套同微信原生视觉体验一致的基础样式库 为微信 Web 开发量身设计，令用户的使用感知更加统一PostCSS - 最近才知道大名鼎鼎Autoprefixer是其插件 推荐大漠的文章《PostCSS深入学习》，有关 PostCSS 不是什么？PostCSS 是什么？PostCSS 可以做什么等等问题，文章里面有答案CSSgram - 图片滤镜库，终于可以用 CSS 在 web 上实现滤镜的效果鸟 IE不支持，不过新的移动设备支持没问题 Can I UseHINT.css - 一款非常小巧的提示框效果Balloon.css| |同上，一款非常小巧的提示框效果Hover.css - 很多鼠标 Hover 态的效果，可以给产品学习一下:)Cursor - 记录各浏览器对Cursor的支持情况csscss - 用于检查 CSS 代码冗余purecss - 小巧的响应式 CSS 库，Yahoo!出品hamburgers - 简单的动画库，让 Click(or Tap) 变得美妙cssmatic - 一个帮忙调试CSS效果的工具浏览端 JSrequirejs - JS模块化是构建复杂项目的第一步 中文学习文档奉上：RequireJS 中文网ECharts - 好用，最关键的是支持的图表展示非常之多，强烈推荐Swiper - 强大的 Slider 库 其实这类效果库非常多，但文档能那么专业的就很少鸟babel - ES6 用起来。这个插件可以让我们用新的 标准/提案 写 JavaScript 代码，然后再向下 转换编译，最终生成随处可用的 JavaScript 代码。中文文档奉上《babel-handbook》fullPage - 非常好用的全屏滑动库，看 Demo 就明白PhotoSwipe - 偶常用的 js 库 官网上有这么一句很关键、重要”no dependencies”Vuejs - 比较喜欢其作者… 所以劳资正在看源码学习学习favico.js - 动态改变浏览器标签栏中的网站图标，非常好玩ant.design - 蚂蚁金服搞的良心项目，文档美好的令人发指 样式优雅，强烈推荐内部系统尝试此库highlightjs - 代码高亮库，支持非常多的语言daterangepicker - 时间选择插件的不二选择，基于 Bootstrap 和 Moment.jsnodePPT - 前同事三水的大作，好用必须得支持:) 用 Markdown 写 PPT，还可以 HTML 混排，上手飞快Sortable - 拖拽神器，用了就知道toastr - 信息提示的库，推荐的原因是卖相好、功能强大 demopeity.js - jQuery的图表插件，特别cute，感觉萌萌哒 将HTML转换成一个小的&amp;lt;svg&amp;gt;饼图、圆环图、折线图等等emojify.js - 能够将emoji关键词转换为emoji图片的JS插件 可以快速的为你的网站提供emoji表情支持Highcharts| |Highcharts 中文网，又是一个图表库 确实功能强大，但是觉得不好看… PS：官网就做的不好看，脏脏的赶脚NProgress - 使页面加载时有更好的loading效果Noticejs - 一个简单的通知库，木有依赖onepage-scroll - 依赖 jQuery 的单页滚动库，和 fullPage 类似videojs - 当下视频需求都用上&amp;lt;video&amp;gt;鸟 样式和交互统一的问题交给 videojs 搞定:)clipboard - 仅 2KB 大小，搞定剪贴板功能，屌不屌~ 但是，Safari 不支持…impress.js - 用来写 PPT 不错，偶也曾为其写过一篇impress.js 初体验Cropper - 国人开发的图片裁剪库Swiper/PhotoSwipe/fullPage 有这仨库，微信里常见的 H5 页完全不是问题哒Project Buildpm2 - 是一个带有负载均衡功能的 Node 应用的进程管理器； 是 Forever 的进阶库，想了解的可以看这篇文章《拥抱PM2》Webpack - 项目构建工具，由于过于复杂和太强大，所以劳资还没去深入研究。Gulp - Gulp 是基于 Node 实现 Web 前端自动化开发的工具。 俺总结了篇《gulp使用小结》，推荐您阅读:)Bower - 前端项目的包管理其实是件复杂的事 谁谁谁依赖谁谁谁，谁谁谁依赖谁谁谁的某个版本…卧槽 Bower 就是搞定这件事儿的，亲爹是 Twitter 推荐篇 Bower 的中文文章：《bower 解决 js 的依赖管理》Grunt - 和 Gulp 类似，都是项目构建的常见选择 对比这俩的文章可谓不少，推荐篇《Gulp vs Grunt》 英盲又想看文档，可以去Grunt 中文网FIS - 度厂出品的前端构建工具 文档清晰，功能强大，推荐了解和使用Gitlab CI - 一套基于Gitlab的持续集成服务Gulp + Webpack 的使用套路参考: learning-gulpGulp 资料收集：use-gulp推荐篇与 Webpack 相关的文章《CSS Modules》Webpack 用起来吼吼：webpack-howtoNode Package作为一名大前端甚至是多端，Node 绝逼是必备的一块有关 Node 的学习资料，请访问这里介绍些有特色且前端有必要知道的包anywhere - 随时随地将你的当前目录变成一个静态文件服务器的根目录supervisor - 监控 Node 代码，自动重启。 A supervisor program for running nodejs programsnodemon - 监控 Node 代码，自动重启。 Nodemon is a utility that will monitor for any changes in your source and automatically restart your server.pm2 - 是一个带有负载均衡功能的 Node 应用的进程管理器； 是 Forever 的进阶库，想了解的可以看这篇文章《拥抱PM2》async - 一个流程控制工具包，提供直接而强大的异步功能lodash - JS 工具库 Underscore.js的一个 fork 发展而来socket.io - 预计 Node 的实时框架 聊天室、页游等对实时性有高要求的较适用Mongoose - 让 NodeJS 更容易操作 Mongodb 数据库； 附上一篇Mongoose 学习参考文档CNPM - 淘宝 NPM 镜像，提供了 NPM 同步的服务 当然可不仅仅这样，利用 CNPM 可以打造企业/个人私有的 NPM 服务 推荐篇搭建私有NPM的文章：《CNPM搭建私有的NPM服务》koa - 玩 Node 都知道 express，但使用 koa 的就少很多，门槛比 Ex 稍高 通过 generator 避免繁琐的回调函数嵌套，强烈推崇 官方的文章教程Shipit - 一个强大的自动化部署工具。 shipit 很多地方非常类似 gulp，他们的核心都是任务系统。node-inspector - Node 调试工具，使用起来跟 Chrome 的 JS 调试器很相似winston - Node 服务最流行的日志库之一co - 用 generator 写法让异步代码同步thenify-all - 把异步的方法变成 Promise 的 Promisifies all the selected functions in an objectPhantomJS - 一般用来做抓取截图和无界面测试 也可以用来操作 DOM 和网络监测，很好玩的库 Quick Startava - 偶是应TJ大神推荐而得之的 ava 未来的测试运行器Mocha - Node 里最常用的测试框架； 它支持多种 Node 的 Assert libs； 同时支持异步和同步的测试，同时支持多种方式导出结果； 也支持直接在 browser 上跑 JS 代码测试。koa-validate - koa 的校验库 可以非常方便的对 queryString 或 postBody 的信息进行验证line-reader - 基于steam的按行读文件，偶处理日志时用哒 要不实现一个按行读文件，又得 steam、 又得 chunk，还是比较麻烦的everyauth| |OAuth 的集成解决方案shelljs - 写 Node 时难免需要用 shell 去操作些神马 shelljs 是基于 Node 的 shell 工具，API 及其简单hashids - 看名称就懂，给 userid 加解密用的node-pool - 让 Node 有连接池的概念colors - 花俏的小工具 让打印console.log时有更好的展示样式n - 控制Node的版本，想升级一行代码搞定supervisor 和 nodemon 这俩都是监控 Node 代码，使得每次修改代码后会，开发 Node 程序必备以上库俺都有使用过，甚至有不少都是项目开发中、各种特定场景下必用的，有任何使用问题欢迎沟通哈:)Node Project_暂无_精选阅读前端技术2015D2前端论坛 - Node方向非常值得看，有干货，相信东哥推荐哈前端开发规范手册 - 此手册主要实现的目标：代码一致性和最佳实践《babel-handbook》 - 可以用新的规范(如 ES6)写代码，经过 babel 编译后生成没有兼容问题的代码ECMAScript 6入门 - 阮一峰大神所著，一本开源的JS教程 全面介绍 ECMAScript 6新引入的语法特性ReactNative 中文版 - 翻译自官方的中文文档ReactWebpackCookBook | |此书会引导读者是进入React和Webpack的世界。 俩都是非常前沿的技术，同时使用会更有趣。ReactNative 学习指南 - 新玩意层出不穷… 对于能持续学习的童鞋，这是个美好的时代HTML/CSS 编码规范 - 编写灵活、稳定、高质量的HTML和CSS代码的规范移动前端入门 - 入门价值高，移动方向常见问题的较好总结GulpBook - Gulp 是基于 Node 实现 Web 前端自动化开发的工具Node 学习资料Node.js 中文资料导航 - Node 的中文资料导航，start1300+从零开始 NodeJS 系列文章 - 基本上每一篇都看过，强烈推荐Node.js 包教不包会 - 值得阅读，看完绝不用买书鸟七天学会 NodeJS - 劳资还没看，不过看目录还不错:)Style Guide - 这是一份关于如何写出一致且美观的 Node 代码的风格指南koa实战 - “明河出品”这四字已经说明一切。PS：正在连载中stream-handbook - 如果学习 NodeJS，那么流一定是需要掌握的概念前端面试在 LinkedIn 做面试官的故事 - 非面试题，介绍 LinkedIn 的面试过程 文章有很多中肯的建议和想法，推荐阅读大漠：写给前端面试者 - 这篇文章不涉及任何的面试题 大漠与大家聊聊面试者与被面者之间的感受…前端面试题 - Git 上非常火的前端面试题，start17k+前端面经 - 主要内容是些前端面试笔试题和面试套路，值得阅读其他技术MongoDB 极简实践入门 - 入门推荐的套路，非常浅显易懂Mac 设置指南 - Mac 使用必看 尤其适合 偏执狂/强迫症 患者:)Markdown 资料 - 简单看些语法入门，快速用起来工具/软件WebCanIuse - 前端必备；查看浏览器对各种新特性的兼容情况overapi - 最全的开发人员在线速查手册百度脑图 - 非常方便的思维导图工具ProcessOn - 和百度脑图的功能类似，脑图工具。VimAwesome - Vim 插件集合，Vim 党必备Tower - 小而美的多人协同工具。 不光只有 Web 版，还有 iPhone、iPad、Android、微信版。Slides - 一个所见即所得的 WebPPT 编辑器，非常推荐faviconer.co - 一个所见即所得的icon生成器，很好用smallpdf - 提供各种格式和 PDF 互相转换Cmd Markdown - 好用的 Web 版 Markdown 编辑器StackEdit - 又是一款 Web 版 Markdown 编辑器墨刀 - 一个在线移动应用原型制作工具。 旨在帮助产品经理快速制作可在手机端展示的移动应用原型。htm2pdf| |HTML to PDFSpeaker Deck - 在线的演讲稿展示平台RunJS - 在线编辑、展示、分享、交流你的 JavaScript 代码Bootswatch - Bootstrap 的免费模板AdminLTE - 又是一个 Bootstrap 的免费管理后台APP以下列表中的 APP 都是不区分系统平台的印象笔记 - 免费账号完全够用，跨平台跨终端的记录软件365日历 - 首先肯定比系统自带的日历强大，要不推荐个蛋蛋 俺一般用来搞目标管理，比如学习计划和工作计划 生活中会订阅演唱会、电影首映的信息多看阅读 - kindle 确实好，但是懒得随身带着 多看还算不错，书较多且偶尔有特价比较爽Surge - 非免费 牛逼的网络开发与调试工具，前端必备Monkey - Monkey 是 iPhone 上一个 GitHub 第三方客户端。 展示 GitHub 上的开发者的排名，以及仓库的排名Mac对于美好事务的追求无论何时都不算晚，前年公司给配了台 Mac 用做测试开发机，于是开始在 Mac 下办公。 Windows？ 回不去鸟…Homebrew - 没它程序猿没法好好干活… Homebrew使OS X更完美。 使用gem来安装gems、用brew来搞定那些依赖包iTerm2 - Mac 终端功能少又不好看，iTerm2 可以解救你~ 推荐篇文章：《让你的命令行丰富多彩》BrowseShot - 偶正在使用的网页截图工具，强烈推荐BeyondCompare - 在Windows下就开始用了 比对文件和文件夹杠杠好使，Merge必备工具CheatSheet - 能够显示当前程序的快捷键列表，默认的快捷键是长按 ⌘Sequel Pro - 免费好用的Mysql工具LICEcap - 屏幕录制工具，支持导出 GIF 动画图片格式 轻量级、使用简单，录制过程中可以改变录屏范围Manico - 快捷启动和切换 APP 的工具，高效的第一步 AppStore 上收费，不过可以免费试用WebStorm - 功能超强的前端 IDE，不多介绍，谁用谁知道 PS：貌似俺插件装多了，用着卡卡的，风扇呼呼转…Atom - 2015 年 7 月之前，在桌面环境下我最喜欢的编辑器是 Sublime。 但之后就是 Atom，俺也专门为它写了篇使用纪要马克鳗 - MarkMan，非常强大好用的标注、测量工具。 日常工作免费版就完全可以满足，强烈推荐Wireshark - 说实话，Mac 下木有 Fiddler 挺不习惯，不过在有更强大的替代品SourceTree - 一款好用的的 Git 客户端工具，重点是支持中文:)focus booster - 因为比较在意时间管理，所以这软件是俺工作时间的必备之物Mou - 我曾使用过的 mk 编辑器。原本准备去掉这个推荐，但是我想让大家了解下这个有意思的事情：《一年了，那个闻名遐迩的 Mou 你还记得吗？》Linuxoh-my-zsh - 终端党 必用的好工具，强烈推荐tree - linux 以树状图逐级列出目录的内容oneapm - 强大的运维工具，提供多种监控客户端； 有采集、分析、展示等一套功能； PS：我这用了服务器监控(免费哦)httpie - 一个 CLI 中的 HTTP 客户端 用法简单、易读Chrome 浏览器插件Chrome 应用商店必定是需要翻墙的哈。以下插件都是俺多年积累淘出来的，按照俺推荐的强度自上向下展示，且大多数插件就是偶工作和生活必备，希望能对大家有用。后续如有新发现好插件，偶也会及时更新哒Postman - POST 接口调试终结者，异常强大的接口调试工具，稍稍有一点学习成本，推荐之JSONView - 就是一个 JSON 的查看工具，可以很方便的展示数据，麻麻再也不用担心偶调试接口啦。PS：同类插件有不少，所以用的开心就行二维码生成器 - RT，不多说明了。PS：这FF早已经自带生成二维码工具了，Chrome 还得装插件才行，任性…Eye Dropper 前端必备的颜色提取神器，操作简单容易上手Page Ruler 前端必备的尺子。计算页面元素间距、位置等信息的时候，你就知道它的好了，无脑上手，你值得拥有FireShot 可以截取整个网页、部分页面，然后支持导出为各种格式。俺微博上发的网页全景图都是靠这个插件截取的Infinity - 好不好用有点见仁见智了，但是我个人比较喜欢。使用后会让你的 新标签页 耳目一新，有漂亮的背景和各种常用的功能，比如地图、天气、Gmail、Chrome商店等等。当然，在这个插件的设置中还可以设置壁纸、动画效果等等Momentum 同样也是 新标签页 的插件，但是不管是视觉上(高清大图)还是功能上，都比 Infinity 高大上不少，Setting 里面有不少设置和快捷键，都很好上手的。Infinity胜在中文和直观，Momentum胜在视觉冲击。俺基本上这俩款看心情换着用，所以希望你也都能喜欢:)Octotree - 在浏览器左侧展示 Github 项目的文件导航，使目录结构一目了然，而且我们国内 Git 的访问速度又不稳定，用这个工具也就很提效率了。对经常使用 Github 的同学强烈推荐BuiltWith / wappalyzer / |Chrome Sniffer Plus - 几款超强的网站分析工具，可以给出网站非常多的技术栈信息。大到 Web Servers、服务端的 Frameworks 或 JS 框架，小到 meta、编码格式甚至 Analytics，非常推荐Adblock Plus 非常非常有名的免费的过滤广告的插件。PS：广告屏蔽这个见仁见智，其实俺个人还是比较接受一些个性化推荐的广告GitPlug - 在 Git 项目页中嵌入有关的图表信息，直观的展示当前项目的 Star Trend，能方便看到当前这个开源项目的发起时间，火爆趋势；对比较知名的项目还有相关的 News 展示补充：翻墙代理的插件偶没使用，偶手机和电脑的翻墙都是配的 Surge 无脑搞定，不过翻墙代理插件推荐Proxy SwitchySharp，熊掌公司里大多用的都是它日常开发相关的插件就以上这些，还有几款如知乎的插件、购物插件等这类与开发效率不沾边的，俺就不这上头列了哈GitGit 教程-廖雪峰 - 俺有看过不少 Git 的文章，确实这个系列是最通俗易懂的GitAwards - Git 工具，可以查看 Git 排名Git 速查 - 分类清晰的速查表Git 简明指南 - 入门Git的简明指南，木有高深内容:)Git 学习资料整理| |内容包括很多 Git 的相关资料，star 1200+GitHub 漫游指南 - 一篇还算不错的 Git 学习总结，就是乱了点… 我理解作者_漫游_的意思是漫无目的想到哪写到哪~ 看到作者为鸟达成 Git 连击的成就，也是蛮拼的:)数据端Mongoose - 让 NodeJS 更容易操作 Mongodb 数据库。 附上一篇Mongoose 学习参考文档设计/交互作为负责最终效果呈现的前端工程师，多少得了解些 设计和交互 的，这也是为什么 fetool 会单独的存在这一章…当然话又说回来了，偶毕业的第一份工作是设计:)站酷 - 里面好东西太多，俺当年真没少再上面淘素材UI中国 - 光听名字就知道有多高大上鸟:)速查手册RT，这篇都是些文档或者API，一般这类东西都在大家浏览器的书签内，偶这也列一下大前端常用的手册地址HEAD - 最全的 &amp;lt;head&amp;gt; 列表，真心佩服这种偏执的整理能力百度CDN公共库 - 基本常见的库都收录拉，搞 demo 的时候特方便HTML 和 CSS 代码规范 - 编写灵活、稳定、高质量的 HTML 和 CSS 代码的规范Linux命令中文手册 - 木有系统的好好学习 Linux，所以命令更不熟悉 真羡慕那些CLI玩的飞起的:)Git 速查 - 分类清晰的速查表jQueryAPI 1.11.3 - ZeptoAPI 基本和 jQuery 一样，所以看一份就好CSS3 - CSS3 的在线手册Express API - 中文手册:) 4.x和3.x都有CI用户指南 - 一个轻量级的 PHP 框架用户指南 推荐指数低的原因是劳资PHP比较弱，囧Yaf - 鸟哥(惠新宸)所写的 PHP 框架 推荐指数低的原因同上…###杂七杂八放些开发中较有用的杂物在这儿租房要点 - 适用于北上广深杭，大城市打拼租房确实是硬伤QQ 群规 - 突然某天，有个 QQ 群让我加群 原本我是拒绝的，但当我看完这篇 QQ 群规后… 劳资真的被感动到了，太牛逼、够专业！ 最后，我默默加群鸟:).gitignore 文件 - 介绍不同语言项目的 gitignore 模板程序员如何优雅的挣零花钱？ - 中肯的文章，如果读完能有些许收获，那么恭喜你git-draw - 黑魔法，可以修改自己 Git 上的 ContributionsGitBook - 写记录的好地方Codebabes - 学编程的网站。 重点是每通过一个测试，尼玛对应的妞会脱一件衣服… PS：要翻墙哦~emailframe - 邮件展示确实比较坑，建议有需要的收藏ReadmeSample| |项目高大上的第一步就是包装，所以来看看 README 的书写套路吧 PS：劳资怎么这么无聊…前端炫技-炫酷狂拽叼炸天站点windows93 - 模拟 Win93 桌面，思路、体验和整体效果比较有意思GeekTyper - 好玩又具有 Geek 精神的网站，虽然创建的目的是个恶作剧 PS：网站需要翻墙2016.makemepulse.com - 帅哭了。请使用现代浏览器打开前端技能栈 - 好玩的前端技能栈展示Mapbox - 非常叼的开源项目，有方便的 JSAPI(还有 SDK)。 不过免费版只能浅尝，流量有限。 PS：网站需要翻墙Clark Duvall - 一枚歪果仁的个人 blog，范儿叼叼的SuperScrollorama - 好玩好看的动画库，链接是 SuperScrollorama 的展示页parallax.js - 一个视差引擎的官网，在电脑和手机上都有很好的体验CSS字母 - 用 CSS 实现英文字母，叼叼的墨刀 - 一个在线移动应用原型制作工具。 旨在帮助产品经理快速制作可在手机端展示的移动应用原型。小结背景俺算个比较能自我总结的码农，所以偶尔喜欢写点东西做些记录或者自我熏陶陶醉一下。可写着写着发现Evernote里面的东西太尼玛多(乱)了，于是想着把一些技术相关的资料都整理整理，都丢到Git上沉淀下来。 这样Evernote就可以只需要记录些偏生活方便的，看着清爽一些…所以，这篇记录其实只是为偶自己而写，确信以后也一直会这样~~~说说目标其实与这篇记录类似的文章太多鸟，俺也不愿意成为一个单纯的收集资料，分享资料的这么个东西。我希望 fetool 能更生动、更个性，最好能更另类点，对于每样工具的思考和解析更多点，吐槽也必须有理有据，然后再配上劳资收集的 low 图，完美！希望通过不停的完善这篇记录，能Push劳资多了解业内的新玩具和新创意，然后围绕这些新东西，客观的再写点好东西，比如文章、资料、开源项目这些，让其他伙伴们少走弯路或学的更顺畅点儿所以劳资对自己的要求是：这篇记录里列出的每样东西，自己都得的去了解、去尝试，然后再列出来。 能举一反三最好，如果达不到至少也能清楚的认识：列出来的这玩意对程序员有没有卵用，解决了啥痛点。TODO继续完善和扩充内容“备注/说明”这一栏不够犀利，希望再多加入自己的理解、点评、吐槽，让这篇记录更犀利和生动支持导出多种格式，如.pdf、.epub、.mobi等后续看看如果有必要，可以单独搞个页面，优化下阅读和展示效果【转载】 原文地址：http://www.fefork.com/fetool/","categories":[{"name":"前端","slug":"前端","permalink":"https://www.elonchung.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://www.elonchung.cn/tags/前端/"},{"name":"小公举","slug":"小公举","permalink":"https://www.elonchung.cn/tags/小公举/"}]},{"title":"58到家数据库30条军规解读","slug":"jungui","date":"2017-03-28T03:53:17.000Z","updated":"2018-05-03T15:30:11.221Z","comments":true,"path":"2017/03/jungui/","link":"","permalink":"https://www.elonchung.cn/2017/03/jungui/","excerpt":"","text":"58到家数据库30条军规解读军规适用场景：并发量大、数据量大的互联网业务军规：介绍内容解读：讲解原因，解读比军规更重要一、基础规范必须使用InnoDB存储引擎解读：支持事务、行级锁、并发性能更好、CPU及内存缓存页优化使得资源利用率更高必须使用UTF8字符集解读：万国码，无需转码，无乱码风险，节省空间数据表、数据字段必须加入中文注释解读：N年后谁tm知道这个r1,r2,r3字段是干嘛的禁止使用存储过程、视图、触发器、Event解读：高并发大数据的互联网业务，架构设计思路是“解放数据库CPU，将计算转移到服务层”，并发量大的情况下，这些功能很可能将数据库拖死，业务逻辑放到服务层具备更好的扩展性，能够轻易实现“增机器就加性能”。数据库擅长存储与索引，CPU计算还是上移吧禁止存储大文件或者大照片解读：为何要让数据库做它不擅长的事情？大文件和照片存储在文件系统，数据库里存URI多好二、命名规范只允许使用内网域名，而不是ip连接数据库线上环境、开发环境、测试环境数据库内网域名遵循命名规范业务名称：xxx线上环境：dj.xxx.db开发环境：dj.xxx.rdb测试环境：dj.xxx.tdb从库在名称后加-s标识，备库在名称后加-ss标识线上从库：dj.xxx-s.db线上备库：dj.xxx-sss.db库名、表名、字段名：小写，下划线风格，不超过32个字符，必须见名知意，禁止拼音英文混用表名t_xxx，非唯一索引名idx_xxx，唯一索引名uniq_xxx三、表设计规范单实例表数目必须小于500单表列数目必须小于30表必须有主键，例如自增主键解读：a）主键递增，数据行写入可以提高插入性能，可以避免page分裂，减少表碎片提升空间和内存的使用b）主键要选择较短的数据类型， Innodb引擎普通索引都会保存主键的值，较短的数据类型可以有效的减少索引的磁盘空间，提高索引的缓存效率c） 无主键的表删除，在row模式的主从架构，会导致备库夯住禁止使用外键，如果有外键完整性约束，需要应用程序控制解读：外键会导致表与表之间耦合，update与delete操作都会涉及相关联的表，十分影响sql 的性能，甚至会造成死锁。高并发情况下容易造成数据库性能，大数据高并发业务场景数据库使用以性能优先四、字段设计规范必须把字段定义为NOT NULL并且提供默认值解读：a）null的列使索引/索引统计/值比较都更加复杂，对MySQL来说更难优化b）null 这种类型MySQL内部需要进行特殊处理，增加数据库处理记录的复杂性；同等条件下，表中有较多空字段的时候，数据库的处理性能会降低很多c）null值需要更多的存储空，无论是表还是索引中每行中的null的列都需要额外的空间来标识d）对null 的处理时候，只能采用is null或is not null，而不能采用=、in、&lt;、&lt;&gt;、!=、not in这些操作符号。如：where name!=’shenjian’，如果存在name为null值的记录，查询结果就不会包含name为null值的记录禁止使用TEXT、BLOB类型解读：会浪费更多的磁盘和内存空间，非必要的大量的大字段查询会淘汰掉热数据，导致内存命中率急剧降低，影响数据库性能禁止使用小数存储货币解读：使用整数吧，小数容易导致钱对不上必须使用varchar(20)存储手机号解读：a）涉及到区号或者国家代号，可能出现+-()b）手机号会去做数学运算么？c）varchar可以支持模糊查询，例如：like“138%”禁止使用ENUM，可使用TINYINT代替解读：a）增加新的ENUM值要做DDL操作b）ENUM的内部实际存储就是整数，你以为自己定义的是字符串？五、索引设计规范单表索引建议控制在5个以内单索引字段数不允许超过5个解读：字段超过5个时，实际已经起不到有效过滤数据的作用了禁止在更新十分频繁、区分度不高的属性上建立索引解读：a）更新会变更B+树，更新频繁的字段建立索引会大大降低数据库性能b）“性别”这种区分度不大的属性，建立索引是没有什么意义的，不能有效过滤数据，性能与全表扫描类似建立组合索引，必须把区分度高的字段放在前面解读：能够更加有效的过滤数据六、SQL使用规范禁止使用SELECT *，只获取必要的字段，需要显示说明列属性解读：a）读取不需要的列会增加CPU、IO、NET消耗b）不能有效的利用覆盖索引c）使用SELECT *容易在增加或者删除字段后出现程序BUG禁止使用INSERT INTO t_xxx VALUES(xxx)，必须显示指定插入的列属性解读：容易在增加或者删除字段后出现程序BUG禁止使用属性隐式转换解读：SELECT uid FROM t_user WHERE phone=13812345678 会导致全表扫描，而不能命中phone索引，猜猜为什么？（这个线上问题不止出现过一次）禁止在WHERE条件的属性上使用函数或者表达式解读：SELECT uid FROM t_user WHERE from_unixtime(day)&gt;=’2017-02-15’ 会导致全表扫描正确的写法是：SELECT uid FROM t_user WHERE day&gt;= unix_timestamp(‘2017-02-15 00:00:00’)禁止负向查询，以及%开头的模糊查询解读：a）负向查询条件：NOT、!=、&lt;&gt;、!&lt;、!&gt;、NOT IN、NOT LIKE等，会导致全表扫描b）%开头的模糊查询，会导致全表扫描禁止大表使用JOIN查询，禁止大表使用子查询解读：会产生临时表，消耗较多内存与CPU，极大影响数据库性能禁止使用OR条件，必须改为IN查询解读：旧版本Mysql的OR查询是不能命中索引的，即使能命中索引，为何要让数据库耗费更多的CPU帮助实施查询优化呢？应用程序必须捕获SQL异常，并有相应处理总结：大数据量高并发的互联网业务，极大影响数据库性能的都不让用，不让用哟。原文链接：https://mp.weixin.qq.com/s/Yjh_fPgrjuhhOZyVtRQ-SA","categories":[{"name":"成长鸡汤","slug":"成长鸡汤","permalink":"https://www.elonchung.cn/categories/成长鸡汤/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://www.elonchung.cn/tags/数据库/"}]},{"title":"Thinkphp 的初体验","slug":"thinkphp","date":"2016-08-15T08:54:28.000Z","updated":"2018-05-03T15:23:13.078Z","comments":true,"path":"2016/08/thinkphp/","link":"","permalink":"https://www.elonchung.cn/2016/08/thinkphp/","excerpt":"","text":"使用版本thinkphp3.2查看运行源码入口文件（多个应用index.php） -&gt; 公共入口文件(全站共用ThinkPHP.php)（定义常量）Thinkphp引导类文件（项目初始化、include核心文件、相关配置、调试配置、中间件、驱动配置等）App.class.php 执行应用程序（相当于路由，转发到Controller/action等操作）MVC操作执行了解目录结构Application/ 应用目录包含一套MVC目录、自定义全局函数、配置目录等ThinkPHP/Runtime/ 系统运行时目录Runtime/Logs/ 应用日志目录 Runtime/Temp/ 应用缓存目录 Runtime/Data/ 应用数据目录 Runtime/Cache/ 应用模板缓存目录 Library/ 系统核心类库目录Library/Think/ Think类库目录 Library/Behavior/ 行为类库目录 Library/Vendor/ 第三方类库目录 Common/ 应用公共目录、全局函数Conf/ 应用配置目录Lang/ 应用语言目录Tpl/ 应用静态目录Mode/ 系统应用模式目录index.php 入口文件了解MVC架构Controller 接收用户请求、与Model交互、转发给View数据Model 响应C操作数据库View 接收C的数据并回显给用户信息了解全局函数使用Thinkphp.class.php 引导类中做相应的加载。全局函数项目公共函数自定义函数了解运行的核心文件开启应用模式后会生成~runtime.php 将核心文件的内容编译到一个文件中。不用每次都遍历引入核心文件，提高二次加载的效率了解驱动使用以配置方式加载不同驱动。例如：数据库支持mysql、sqlite、oracle等session 支持memcache/DB/mysqli等优点：上手容易，了解目录结构基本知道其运行流程及原理。整合好一堆SDK ，第三方扩张，轻量级，快速开发。难点：就是要记一堆的全局函数的使用。耦合性比较高。不太支持平滑升级版本。基本上要重写应用。","categories":[{"name":"PHP","slug":"PHP","permalink":"https://www.elonchung.cn/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://www.elonchung.cn/tags/PHP/"}]},{"title":"Git 命令清单","slug":"git-command","date":"2016-08-15T08:54:28.000Z","updated":"2018-05-03T15:31:35.119Z","comments":true,"path":"2016/08/git-command/","link":"","permalink":"https://www.elonchung.cn/2016/08/git-command/","excerpt":"","text":"我每天使用 Git ，但是很多命令记不住。一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。* Workspace：工作区 * Index / Stage：暂存区 * Repository：仓库区（或本地仓库） * Remote：远程仓库 新建代码库在当前目录新建一个Git代码库$ git init新建一个目录，将其初始化为Git代码库$ git init [project-name]下载一个项目和它的整个代码历史$ git clone [url]配置Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。显示当前的Git配置$ git config –list编辑Git配置文件$ git config -e [–global]设置提交代码时的用户信息$ git config [–global] user.name “[name]”$ git config [–global] user.email “[email address]”增加/删除文件添加指定文件到暂存区$ git add [file1] [file2] …添加指定目录到暂存区，包括子目录$ git add [dir]添加当前目录的所有文件到暂存区$ git add .删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] …停止追踪指定文件，但该文件会保留在工作区$ git rm –cached [file]改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed]代码提交提交暂存区到仓库区$ git commit -m [message]提交暂存区的指定文件到仓库区$ git commit [file1] [file2] … -m [message]提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a提交时显示所有diff信息$ git commit -v使用一次新的commit，替代上一次提交如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit –amend -m [message]重做上一次commit，并包括指定文件的新变化$ git commit –amend [file1] [file2] …分支列出所有本地分支$ git branch列出所有远程分支$ git branch -r列出所有本地分支和远程分支$ git branch -a新建一个分支，但依然停留在当前分支$ git branch [branch-name]新建一个分支，并切换到该分支$ git checkout -b [branch]新建一个分支，指向指定commit$ git branch [branch] [commit]新建一个分支，与指定的远程分支建立追踪关系$ git branch –track [branch] [remote-branch]切换到指定分支，并更新工作区$ git checkout [branch-name]建立追踪关系，在现有分支与指定的远程分支之间$ git branch –set-upstream [branch] [remote-branch]合并指定分支到当前分支$ git merge [branch]选择一个commit，合并进当前分支$ git cherry-pick [commit]删除分支$ git branch -d [branch-name]删除远程分支$ git push origin –delete [branch-name]$ git branch -dr [remote/branch]标签列出所有tag$ git tag新建一个tag在当前commit$ git tag [tag]新建一个tag在指定commit$ git tag [tag] [commit]查看tag信息$ git show [tag]提交指定tag$ git push [remote] [tag]提交所有tag$ git push [remote] –tags新建一个分支，指向某个tag$ git checkout -b [branch] [tag]查看信息显示有变更的文件$ git status显示当前分支的版本历史$ git log显示commit历史，以及每次commit发生变更的文件$ git log –stat显示某个文件的版本历史，包括文件改名$ git log –follow [file]$ git whatchanged [file]显示指定文件相关的每一次diff$ git log -p [file]显示指定文件是什么人在什么时间修改过$ git blame [file]显示暂存区和工作区的差异$ git diff显示暂存区和上一个commit的差异$ git diff –cached [file]显示工作区与当前分支最新commit之间的差异$ git diff HEAD显示两次提交之间的差异$ git diff [first-branch]…[second-branch]显示某次提交的元数据和内容变化$ git show [commit]显示某次提交发生变化的文件$ git show –name-only [commit]显示某次提交时，某个文件的内容$ git show [commit]:[filename]显示当前分支的最近几次提交$ git reflog远程同步下载远程仓库的所有变动$ git fetch [remote]显示所有远程仓库$ git remote -v显示某个远程仓库的信息$ git remote show [remote]增加一个新的远程仓库，并命名$ git remote add [shortname] [url]取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]上传本地指定分支到远程仓库$ git push [remote] [branch]强行推送当前分支到远程仓库，即使有冲突$ git push [remote] –force推送所有分支到远程仓库$ git push [remote] –all撤销恢复暂存区的指定文件到工作区$ git checkout [file]恢复某个commit的指定文件到工作区$ git checkout [commit] [file]恢复上一个commit的所有文件到工作区$ git checkout .重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]重置暂存区与工作区，与上一次commit保持一致$ git reset –hard重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset –hard [commit]重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset –keep [commit]新建一个commit，用来撤销指定commit后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]其他生成一个可供发布的压缩包$ git archive","categories":[{"name":"Git","slug":"Git","permalink":"https://www.elonchung.cn/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://www.elonchung.cn/tags/Git/"}]},{"title":"phpstorm安装与配置","slug":"phpstorm","date":"2016-03-20T02:38:56.000Z","updated":"2018-05-04T06:00:58.765Z","comments":true,"path":"2016/03/phpstorm/","link":"","permalink":"https://www.elonchung.cn/2016/03/phpstorm/","excerpt":"","text":"phpstorm 快捷键优雅使用phpstormxdebug 配置xdebug 配置phpstorm官网PHP WEB APPLICATION 单页面debug调试PHP REMOTE DEBUG 远程项目调试 （整个项目抓取）","categories":[{"name":"小公举","slug":"小公举","permalink":"https://www.elonchung.cn/categories/小公举/"}],"tags":[{"name":"小公举","slug":"小公举","permalink":"https://www.elonchung.cn/tags/小公举/"},{"name":"phpstorm","slug":"phpstorm","permalink":"https://www.elonchung.cn/tags/phpstorm/"}]},{"title":"Postman模拟登录调试","slug":"postman","date":"2016-03-20T02:38:56.000Z","updated":"2018-05-03T15:28:00.041Z","comments":true,"path":"2016/03/postman/","link":"","permalink":"https://www.elonchung.cn/2016/03/postman/","excerpt":"","text":"postman模拟登录调试postman 算是一个神器了，对于后台开发来说简直就是福音。因为可以直接模拟表单，查看数据等。postman入门使用首先请chrome商店下载postman，选择应用中的postman，拓展程序中的postman interceptor也可以一并安装，这个是为了让我们能够模拟登录用的插件。chrome postman下载地址1.了解postman你可以选择各种请求方式。这里我选的是post。2. 构造请求表单如下图，在body标签中，选择form-data，然后构造了一个有四个请求参数的表单。然后点击send就能够请求和返回后台了。postman模拟登录请求1. chrome打开postman interceptorchrome中打开request capture，Filter requests默认是全部都抓取，你可以自定义。如：localhost:8081表示只拦截本地的8081端口的请求。默认的配置.*配置拦截所有请求，可以使用默认配置不用修改。2. 在浏览器中登录需要调试的网站如果你已经的登录了，那么刷新一下网站就好了，主要是让postman interceptor获取到你这个网站的cookie3. 配置postman在Postman中启用Interceptor，如下图：然后你就可以愉快的调试了～","categories":[{"name":"小公举","slug":"小公举","permalink":"https://www.elonchung.cn/categories/小公举/"}],"tags":[{"name":"小公举","slug":"小公举","permalink":"https://www.elonchung.cn/tags/小公举/"}]}]}